// –ú–æ–¥—É–ª—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
const auth = {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è
    init() {
        this.setupEventListeners();
    },

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
    setupEventListeners() {
        // –¢–∞–±—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        document.querySelectorAll('.tab').forEach(tab => {
            tab.addEventListener('click', function() {
                const tabName = this.getAttribute('data-tab');
                auth.showAuthTab(tabName);
            });
        });

        // –ö–Ω–æ–ø–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        const loginBtn = document.getElementById('loginBtn');
        const registerBtn = document.getElementById('registerBtn');
        
        if (loginBtn) {
            loginBtn.addEventListener('click', function(e) {
                e.preventDefault();
                e.stopPropagation();
                auth.login();
            });
        }
        
        if (registerBtn) {
            registerBtn.addEventListener('click', function(e) {
                e.preventDefault();
                e.stopPropagation();
                auth.register();
            });
        }

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Enter
        const authPassword = document.getElementById('authPassword');
        const regPasswordConfirm = document.getElementById('regPasswordConfirm');
        
        if (authPassword) {
            authPassword.addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    e.preventDefault();
                    auth.login();
                }
            });
        }

        if (regPasswordConfirm) {
            regPasswordConfirm.addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    e.preventDefault();
                    auth.register();
                }
            });
        }
    },

    // –ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞–± –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    showAuthTab(tabName) {
        document.querySelectorAll('.tab').forEach(tab => {
            tab.classList.toggle('active', tab.getAttribute('data-tab') === tabName);
        });

        document.getElementById('loginForm').classList.toggle('hidden', tabName !== 'login');
        document.getElementById('registerForm').classList.toggle('hidden', tabName !== 'register');
    },

    // –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É
    login() {
        const usernameInput = document.getElementById('authUsername');
        const passwordInput = document.getElementById('authPassword');
        
        if (!usernameInput || !passwordInput) {
            utils.showNotification('‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º—ã!', 'error');
            return;
        }

        const username = usernameInput.value.trim();
        const password = passwordInput.value.trim();

        if (!username || !password) {
            utils.showNotification('‚ùå –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!', 'error');
            return;
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
        const loginBtn = document.getElementById('loginBtn');
        if (loginBtn) {
            const originalText = loginBtn.innerHTML;
            loginBtn.innerHTML = '<div class="loading"></div><span>–í—Ö–æ–¥...</span>';
            loginBtn.disabled = true;
            
            setTimeout(() => {
                loginBtn.innerHTML = originalText;
                loginBtn.disabled = false;
            }, 3000);
        }

        if (socket && socket.connected) {
            socket.emit('login', { username, password });
        } else {
            utils.showNotification('‚ùå –ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º', 'error');
        }
    },

    // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
    register() {
        const usernameInput = document.getElementById('regUsername');
        const passwordInput = document.getElementById('regPassword');
        const passwordConfirmInput = document.getElementById('regPasswordConfirm');
        
        if (!usernameInput || !passwordInput || !passwordConfirmInput) {
            utils.showNotification('‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º—ã!', 'error');
            return;
        }

        const username = usernameInput.value.trim();
        const password = passwordInput.value.trim();
        const passwordConfirm = passwordConfirmInput.value.trim();

        if (!username || !password || !passwordConfirm) {
            utils.showNotification('‚ùå –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!', 'error');
            return;
        }

        if (password !== passwordConfirm) {
            utils.showNotification('‚ùå –ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç!', 'error');
            return;
        }

        if (password.length < 6) {
            utils.showNotification('‚ùå –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 6 —Å–∏–º–≤–æ–ª–æ–≤!', 'error');
            return;
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
        const registerBtn = document.getElementById('registerBtn');
        if (registerBtn) {
            const originalText = registerBtn.innerHTML;
            registerBtn.innerHTML = '<div class="loading"></div><span>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è...</span>';
            registerBtn.disabled = true;
            
            setTimeout(() => {
                registerBtn.innerHTML = originalText;
                registerBtn.disabled = false;
            }, 3000);
        }

        if (socket && socket.connected) {
            socket.emit('register', { 
                username, 
                password,
                role: 'user'
            });
        } else {
            utils.showNotification('‚ùå –ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º', 'error');
        }
    },

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—Ö–æ–¥–∞
    handleLoginSuccess(user) {
        currentUser = user;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é
        localStorage.setItem('currentUserId', user.id);
        localStorage.setItem('currentUser', JSON.stringify(user));
        
        utils.showNotification(`‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${user.displayName || user.username}!`, 'success');
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –æ–Ω–ª–∞–π–Ω
        this.startOnlineTimer();
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ —Ä–æ–ª–∏
        if (user.role === 'user') {
            this.showUserInterface();
        } else if (user.role === 'listener') {
            this.showListenerInterface();
        } else if (user.role === 'admin') {
            this.showAdminPanel();
        }
    },

    // –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    showUserInterface() {
        utils.hideAllInterfaces();
        document.getElementById('userInterface').style.display = 'block';
        
        document.getElementById('userDisplayName').textContent = currentUser.displayName || currentUser.username;
        document.getElementById('userRole').textContent = utils.getRoleDisplayName(currentUser.role);
        document.getElementById('userAvatar').textContent = currentUser.avatar || 'üë§';
        
        userSettings.showThemeSettings();
        listeners.loadCards();
        notifications.updateUserNotifications();
    },

    // –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å–ª—É—à–∞—Ç–µ–ª—è
    showListenerInterface() {
        utils.hideAllInterfaces();
        document.getElementById('listenerInterface').style.display = 'block';
        
        document.getElementById('listenerDisplayName').textContent = currentUser.displayName || currentUser.username;
        document.getElementById('listenerRole').textContent = utils.getRoleDisplayName(currentUser.role);
        document.getElementById('listenerAvatar').textContent = currentUser.avatar || 'üë§';
        document.getElementById('listenerRatingValue').textContent = (currentUser.rating || 0).toFixed(1);
        document.getElementById('listenerRatingCount').textContent = currentUser.ratingCount || 0;
        
        listenerSettings.showThemeSettings();
        chat.updateListenerChatsList();
        chat.updateListenerReviewsData();
        chat.updateListenerStats();
        notifications.updateListenerNotifications();
        
        this.startOnlineTimer();
    },

    // –ü–æ–∫–∞–∑–∞—Ç—å –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
    showAdminPanel() {
        utils.hideAllInterfaces();
        document.getElementById('adminPanel').style.display = 'block';
        
        document.getElementById('adminDisplayName').textContent = currentUser.displayName || currentUser.username;
        document.getElementById('adminRole').textContent = utils.getRoleDisplayName(currentUser.role);
        
        admin.updateData();
        adminSettings.showThemeSettings();
    },

    // –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ –æ–Ω–ª–∞–π–Ω –≤—Ä–µ–º–µ–Ω–∏
    startOnlineTimer() {
        onlineTimeStart = new Date();
        clearInterval(onlineTimer);
        onlineTimer = setInterval(() => {
            if (onlineTimeStart) {
                const now = new Date();
                const diff = Math.floor((now - onlineTimeStart) / 1000 / 60 / 60);
                const onlineTimeElement = document.getElementById('listenerOnlineTime');
                if (onlineTimeElement) {
                    onlineTimeElement.textContent = diff + '—á';
                }
            }
        }, 60000);
    },

    // –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
    logout() {
        if (socket) {
            socket.disconnect();
        }
        localStorage.removeItem('currentUserId');
        localStorage.removeItem('currentUser');
        currentUser = null;
        
        clearInterval(chatTimer);
        clearInterval(onlineTimer);
        
        utils.hideAllInterfaces();
        document.getElementById('authScreen').style.display = 'flex';
        utils.showNotification('üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å —Å–∫–æ—Ä–µ–µ!', 'success');
    }
};
