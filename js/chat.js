// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —á–∞—Ç–æ–º
function startChatWithListener(listenerId) {
    const listener = users.find(u => u.id === listenerId);
    if (!listener) {
        showNotification('‚ùå –°–ª—É—à–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!', 'error');
        return;
    }

    currentListener = listener;
    
    console.log('üí¨ –ù–∞—á–∞–ª–æ —á–∞—Ç–∞ —Å:', listener.displayName || listener.username);
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —á–∞—Ç —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–µ—Ä
    socket.emit('create_chat', {
        user1: currentUser.id,
        user2: listenerId
    });

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    showChatLoading(true);
}

function showChatLoading(show) {
    const chatSection = document.getElementById('userChatSection');
    const messagesContainer = document.getElementById('userMessagesContainer');
    
    if (show) {
        if (messagesContainer) {
            messagesContainer.innerHTML = `
                <div class="chat-loading">
                    <div class="loading-spinner"></div>
                    <div>–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–ª—É—à–∞—Ç–µ–ª—é...</div>
                </div>
            `;
        }
    }
}

function startChatTimer() {
    clearInterval(chatTimer);
    chatStartTime = new Date();
    
    chatTimer = setInterval(() => {
        if (!chatStartTime) return;
        const now = new Date();
        const diff = Math.floor((now - chatStartTime) / 1000);
        const minutes = Math.floor(diff / 60);
        const seconds = diff % 60;
        
        const durationElement = document.getElementById('chatDuration');
        if (durationElement) {
            durationElement.textContent = 
                `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
        }
    }, 1000);
}

function sendUserMessage() {
    if (!activeChat) {
        showNotification('‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ª—É—à–∞—Ç–µ–ª—è!', 'error');
        return;
    }
    
    const input = document.getElementById('userMessageInput');
    const text = input.value.trim();
    
    if (!text) {
        showNotification('‚ùå –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!', 'error');
        return;
    }

    const message = {
        text: text,
        senderId: currentUser.id,
        timestamp: new Date().toISOString()
    };

    console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', message);
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ä–∞–∑—É –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    addMessageToUserChat(message);
    
    socket.emit('send_message', {
        chatId: activeChat.id,
        message: message
    });

    input.value = '';
    input.focus();
}

function sendListenerMessage() {
    if (!activeChat) {
        showNotification('‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç –¥–ª—è –æ–±—â–µ–Ω–∏—è!', 'error');
        return;
    }
    
    const input = document.getElementById('listenerMessageInput');
    const text = input.value.trim();
    
    if (!text) {
        showNotification('‚ùå –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!', 'error');
        return;
    }

    const message = {
        text: text,
        senderId: currentUser.id,
        timestamp: new Date().toISOString()
    };

    console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–ª—É—à–∞—Ç–µ–ª—è:', message);
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ä–∞–∑—É –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    addMessageToListenerChat(message);
    
    socket.emit('send_message', {
        chatId: activeChat.id,
        message: message
    });

    input.value = '';
    input.focus();
}

function handleNewMessage(data) {
    console.log('üì® –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', data);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–æ –ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if (messageIds.has(data.message.id)) {
        console.log('‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º:', data.message.id);
        return;
    }
    
    messageIds.add(data.message.id);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if (activeChat && activeChat.id === data.chatId) {
        if (!activeChat.messages) activeChat.messages = [];
        activeChat.messages.push(data.message);
        
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —É –æ–±–æ–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞
        if (currentUser.role === 'user') {
            // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
            if (data.message.senderId !== currentUser.id) {
                addMessageToUserChat(data.message);
            }
        } else if (currentUser.role === 'listener') {
            // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å–ª—É—à–∞—Ç–µ–ª—è, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
            if (data.message.senderId !== currentUser.id) {
                addMessageToListenerChat(data.message);
            }
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
        updateMessageCount();
    }
    
    // –ü–æ–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
    if (currentUser && data.message.senderId !== currentUser.id) {
        socket.emit('mark_messages_read', {
            chatId: data.chatId,
            userId: currentUser.id
        });
    }
}

function addMessageToUserChat(message, scroll = true) {
    const container = document.getElementById('userMessagesContainer');
    if (!container) return;
    
    // –û—á–∏—â–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    if (container.children.length === 1) {
        const firstChild = container.children[0];
        if (firstChild.className === 'chat-welcome' || firstChild.className === 'chat-loading') {
            container.innerHTML = '';
        }
    }
    
    const messageDiv = document.createElement('div');
    const isCurrentUser = message.senderId === currentUser.id;
    messageDiv.className = `message ${isCurrentUser ? 'user-message' : 'listener-message'}`;
    
    messageDiv.innerHTML = `
        <div class="message-content">
            <div class="message-text">${message.text}</div>
            <div class="message-time">${new Date(message.timestamp).toLocaleTimeString('ru-RU', { 
                hour: '2-digit', 
                minute: '2-digit' 
            })}</div>
        </div>
    `;
    
    container.appendChild(messageDiv);
    
    if (scroll) {
        container.scrollTop = container.scrollHeight;
    }
}

function addMessageToListenerChat(message, scroll = true) {
    const container = document.getElementById('listenerMessagesContainer');
    if (!container) return;
    
    // –û—á–∏—â–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if (container.children.length === 1 && container.children[0].className === 'chat-welcome') {
        container.innerHTML = '';
    }
    
    const messageDiv = document.createElement('div');
    const isCurrentUser = message.senderId === currentUser.id;
    messageDiv.className = `message ${isCurrentUser ? 'listener-message' : 'user-message'}`;
    
    const user = users.find(u => u.id === message.senderId);
    const userName = user ? (user.displayName || user.username) : '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
    
    messageDiv.innerHTML = `
        <div class="message-content">
            ${!isCurrentUser ? `<div class="message-sender">${userName}</div>` : ''}
            <div class="message-text">${message.text}</div>
            <div class="message-time">${new Date(message.timestamp).toLocaleTimeString('ru-RU', { 
                hour: '2-digit', 
                minute: '2-digit' 
            })}</div>
        </div>
    `;
    
    container.appendChild(messageDiv);
    
    if (scroll) {
        container.scrollTop = container.scrollHeight;
    }
}

function updateMessageCount() {
    if (activeChat && activeChat.messages) {
        const countElement = document.getElementById('messageCount');
        if (countElement) {
            countElement.textContent = activeChat.messages.length;
        }
    }
}

function loadUserChatMessages() {
    const container = document.getElementById('userMessagesContainer');
    if (!container) return;
    
    container.innerHTML = '';
    
    if (!activeChat || !activeChat.messages || activeChat.messages.length === 0) {
        container.innerHTML = `
            <div class="chat-welcome">
                <div class="welcome-icon">üí¨</div>
                <div class="welcome-title">–ß–∞—Ç –Ω–∞—á–∞—Ç</div>
                <div class="welcome-subtitle">–ù–∞—á–Ω–∏—Ç–µ –æ–±—â–µ–Ω–∏–µ —Å –≤–∞—à–∏–º —Å–ª—É—à–∞—Ç–µ–ª–µ–º</div>
            </div>
        `;
        return;
    }
    
    activeChat.messages.forEach(message => {
        addMessageToUserChat(message, false);
    });
    
    container.scrollTop = container.scrollHeight;
    updateMessageCount();
}

function loadListenerChatMessages() {
    const container = document.getElementById('listenerMessagesContainer');
    if (!container) return;
    
    container.innerHTML = '';
    
    if (!activeChat || !activeChat.messages || activeChat.messages.length === 0) {
        container.innerHTML = `
            <div class="chat-welcome">
                <div class="welcome-icon">üí¨</div>
                <div class="welcome-title">–ß–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º</div>
                <div class="welcome-subtitle">–ù–∞—á–Ω–∏—Ç–µ –æ–±—â–µ–Ω–∏–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º</div>
            </div>
        `;
        return;
    }
    
    activeChat.messages.forEach(message => {
        addMessageToListenerChat(message, false);
    });
    
    container.scrollTop = container.scrollHeight;
}

function loadAdminChatMessages(chat) {
    const container = document.getElementById('adminMessagesContainer');
    if (!container) return;
    
    container.innerHTML = '';
    
    if (!chat || !chat.messages || chat.messages.length === 0) {
        container.innerHTML = `
            <div class="empty-state">
                <div>üí¨ –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π</div>
                <div class="empty-state-subtitle">–í —ç—Ç–æ–º —á–∞—Ç–µ –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π</div>
            </div>
        `;
        return;
    }
    
    chat.messages.forEach(message => {
        const messageDiv = document.createElement('div');
        const user = users.find(u => u.id === message.senderId);
        const isUser = user && user.role === 'user';
        
        messageDiv.className = `message ${isUser ? 'user-message' : 'listener-message'}`;
        messageDiv.innerHTML = `
            <div class="message-content">
                <div class="message-sender">${user ? (user.displayName || user.username) : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'}</div>
                <div class="message-text">${message.text}</div>
                <div class="message-time">${new Date(message.timestamp).toLocaleString('ru-RU')}</div>
            </div>
        `;
        container.appendChild(messageDiv);
    });
    
    container.scrollTop = container.scrollHeight;
}

function endChat() {
    console.log('üö™ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —á–∞—Ç–∞');
    
    if (activeChat) {
        socket.emit('end_chat', { chatId: activeChat.id });
    }

    // –°–∫—Ä—ã–≤–∞–µ–º —á–∞—Ç –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–ª—É—à–∞—Ç–µ–ª–µ–π
    if (currentUser.role === 'user') {
        document.getElementById('userChatSection').classList.add('hidden');
        document.getElementById('listenersTab').classList.remove('hidden');
    }
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
    clearInterval(chatTimer);
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    activeChat = null;
    currentListener = null;
    chatStartTime = null;
    
    showNotification('üîö –ß–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω', 'info');
}

function submitRating() {
    if (!activeChat || !currentListener) {
        showNotification('‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞ –¥–ª—è –æ—Ü–µ–Ω–∫–∏!', 'error');
        return;
    }
    
    const rating = parseInt(document.querySelector('input[name="rating"]:checked')?.value);
    const comment = document.getElementById('ratingComment').value.trim();
    
    if (!rating) {
        showNotification('‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ü–µ–Ω–∫—É!', 'error');
        return;
    }

    socket.emit('submit_rating', {
        listenerId: currentListener.id,
        userId: currentUser.id,
        rating: rating,
        comment: comment
    });
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –æ—Ü–µ–Ω–∫–∏
    closeRatingModal();
    endChat();
}

function showRatingModal() {
    document.getElementById('ratingModal').classList.add('active');
}

function closeRatingModal() {
    document.getElementById('ratingModal').classList.remove('active');
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É
    document.querySelector('input[name="rating"]:checked')?.checked = false;
    document.getElementById('ratingComment').value = '';
}

function updateChatsUI() {
    if (!currentUser) return;

    if (currentUser.role === 'user' && activeChat) {
        const updatedChat = chats.find(c => c.id === activeChat.id);
        if (updatedChat) {
            activeChat = updatedChat;
            loadUserChatMessages();
        }
    } else if (currentUser.role === 'listener') {
        updateListenerChatsList();
        if (activeChat) {
            const updatedChat = chats.find(c => c.id === activeChat.id);
            if (updatedChat) {
                activeChat = updatedChat;
                loadListenerChatMessages();
            }
        }
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∞–≤–∏—à
function initChatInputHandlers() {
    // Enter –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    document.addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
            const activeElement = document.activeElement;
            if (activeElement && (activeElement.id === 'userMessageInput' || activeElement.id === 'listenerMessageInput')) {
                if (currentUser.role === 'user') {
                    sendUserMessage();
                } else if (currentUser.role === 'listener') {
                    sendListenerMessage();
                }
            }
        }
    });
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', function() {
    initChatInputHandlers();
});
