// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å–ª—É—à–∞—Ç–µ–ª—è–º–∏ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
function showUserTab(tabName) {
    console.log('üë§ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–∞–±–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', tabName);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∞–±—ã
    document.querySelectorAll('#userInterface .tab').forEach(tab => {
        tab.classList.toggle('active', tab.getAttribute('data-tab') === tabName);
    });

    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Ä–∞–∑–¥–µ–ª—ã
    document.getElementById('listenersTab').classList.add('hidden');
    document.getElementById('userNotificationsTab').classList.add('hidden');
    document.getElementById('userChatSection').classList.add('hidden');
    document.getElementById('userSettings').classList.add('hidden');

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–∞–∑–¥–µ–ª
    switch(tabName) {
        case 'listeners':
            document.getElementById('listenersTab').classList.remove('hidden');
            loadListenerCards();
            break;
        case 'notifications':
            document.getElementById('userNotificationsTab').classList.remove('hidden');
            updateUserNotifications();
            break;
        case 'settings':
            document.getElementById('userSettings').classList.remove('hidden');
            loadUserSettings();
            break;
    }
}

function showListenerTab(tabName) {
    console.log('üéß –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–∞–±–∞ —Å–ª—É—à–∞—Ç–µ–ª—è:', tabName);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∞–±—ã
    document.querySelectorAll('#listenerInterface .tab').forEach(tab => {
        tab.classList.toggle('active', tab.getAttribute('data-tab') === tabName);
    });

    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Ä–∞–∑–¥–µ–ª—ã
    document.getElementById('listenerChatsTab').classList.add('hidden');
    document.getElementById('listenerReviewsTab').classList.add('hidden');
    document.getElementById('listenerStatsTab').classList.add('hidden');
    document.getElementById('listenerNotificationsTab').classList.add('hidden');
    document.getElementById('listenerSettings').classList.add('hidden');

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–∞–∑–¥–µ–ª
    switch(tabName) {
        case 'chats':
            document.getElementById('listenerChatsTab').classList.remove('hidden');
            updateListenerChatsList();
            break;
        case 'reviews':
            document.getElementById('listenerReviewsTab').classList.remove('hidden');
            updateListenerReviewsData();
            break;
        case 'stats':
            document.getElementById('listenerStatsTab').classList.remove('hidden');
            updateListenerStats();
            break;
        case 'notifications':
            document.getElementById('listenerNotificationsTab').classList.remove('hidden');
            updateListenerNotifications();
            break;
        case 'settings':
            document.getElementById('listenerSettings').classList.remove('hidden');
            loadListenerSettings();
            break;
    }
}

function loadListenerCards() {
    const container = document.getElementById('listenerCards');
    if (!container) return;
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ª—É—à–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –æ–Ω–ª–∞–π–Ω –∏ –Ω–µ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)
    const availableListeners = users.filter(u => 
        (u.role === 'listener' || u.role === 'admin') && 
        u.id !== currentUser.id && 
        u.isOnline
    );
    
    console.log('üéß –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª—É—à–∞—Ç–µ–ª–∏:', availableListeners.length);
    
    if (availableListeners.length === 0) {
        container.innerHTML = `
            <div class="empty-listeners">
                <div class="empty-icon">üòî</div>
                <div class="empty-title">–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª—É—à–∞—Ç–µ–ª–µ–π</div>
                <div class="empty-subtitle">–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–ª—É—à–∞—Ç–µ–ª—è</div>
                <button class="btn btn-primary" onclick="selectRandomListener()">
                    üé≤ –í—ã–±—Ä–∞—Ç—å —Å–ª—É—á–∞–π–Ω–æ–≥–æ
                </button>
            </div>
        `;
        return;
    }

    container.innerHTML = availableListeners.map(listener => `
        <div class="listener-card" onclick="startChatWithListener('${listener.id}')">
            <div class="listener-header">
                <div class="listener-avatar">${listener.avatar || 'üë§'}</div>
                <div class="listener-info">
                    <h3 class="listener-name">${listener.displayName || listener.username}</h3>
                    <div class="listener-rating">
                        <span class="stars">${'‚òÖ'.repeat(Math.floor(listener.rating || 0))}${'‚òÜ'.repeat(5-Math.floor(listener.rating || 0))}</span>
                        <span class="rating-value">${(listener.rating || 0).toFixed(1)}</span>
                        <span class="rating-count">(${listener.ratingCount || 0})</span>
                    </div>
                </div>
            </div>
            <div class="listener-details">
                <div class="listener-status online">
                    <span class="status-dot"></span>
                    ‚óè –û–Ω–ª–∞–π–Ω
                </div>
                <div class="listener-role">${getRoleDisplayName(listener.role)}</div>
                ${listener.email ? `<div class="listener-email">${listener.email}</div>` : ''}
            </div>
            <div class="listener-actions">
                <button class="btn btn-primary btn-full" onclick="event.stopPropagation(); startChatWithListener('${listener.id}')">
                    üí¨ –ù–∞—á–∞—Ç—å —á–∞—Ç
                </button>
            </div>
        </div>
    `).join('');
}

function selectRandomListener() {
    const availableListeners = users.filter(u => 
        (u.role === 'listener' || u.role === 'admin') && 
        u.isOnline && 
        u.id !== currentUser.id
    );
    
    if (availableListeners.length === 0) {
        showNotification('‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª—É—à–∞—Ç–µ–ª–µ–π –æ–Ω–ª–∞–π–Ω!', 'error');
        return;
    }
    
    const randomListener = availableListeners[Math.floor(Math.random() * availableListeners.length)];
    showNotification(`üé≤ –í—ã–±—Ä–∞–Ω —Å–ª—É—à–∞—Ç–µ–ª—å: ${randomListener.displayName || randomListener.username}`, 'info');
    startChatWithListener(randomListener.id);
}

function updateListenerChatsList() {
    const container = document.getElementById('listenerChatsList');
    if (!container) return;
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º —á–∞—Ç—ã —Å–ª—É—à–∞—Ç–µ–ª—è
    const listenerChats = chats.filter(chat => 
        chat.user2 === currentUser.id && chat.isActive
    );
    
    console.log('üí¨ –ê–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã —Å–ª—É—à–∞—Ç–µ–ª—è:', listenerChats.length);
    
    if (listenerChats.length === 0) {
        container.innerHTML = `
            <div class="empty-state">
                <div class="empty-icon">üò¥</div>
                <div class="empty-title">–ê–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç</div>
                <div class="empty-subtitle">–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</div>
            </div>
        `;
        return;
    }
    
    container.innerHTML = listenerChats.map(chat => {
        const user = users.find(u => u.id === chat.user1);
        const lastMessage = chat.messages && chat.messages.length > 0 ? 
            chat.messages[chat.messages.length - 1] : null;
        
        return `
            <div class="chat-item ${activeChat && activeChat.id === chat.id ? 'active' : ''}" 
                 onclick="selectListenerChat('${chat.id}')">
                <div class="chat-header">
                    <div class="chat-user">
                        <span class="user-avatar-small">${user ? (user.avatar || 'üë§') : 'üë§'}</span>
                        <div class="user-info">
                            <div class="user-name">${user ? (user.displayName || user.username) : '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}</div>
                            <div class="chat-status active">‚óè –ê–∫—Ç–∏–≤–Ω—ã–π</div>
                        </div>
                    </div>
                    <div class="chat-meta">
                        <span class="message-count">${chat.messages ? chat.messages.length : 0} —Å–æ–æ–±—â.</span>
                    </div>
                </div>
                ${lastMessage ? `
                    <div class="last-message">
                        ${lastMessage.text.substring(0, 60)}${lastMessage.text.length > 60 ? '...' : ''}
                    </div>
                    <div class="message-time">
                        ${new Date(lastMessage.timestamp).toLocaleTimeString('ru-RU')}
                    </div>
                ` : `
                    <div class="last-message empty">–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π</div>
                `}
            </div>
        `;
    }).join('');
}

function selectListenerChat(chatId) {
    const chat = chats.find(chat => chat.id === chatId);
    if (!chat) {
        showNotification('‚ùå –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!', 'error');
        return;
    }

    activeChat = chat;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ
    document.querySelectorAll('.chat-item').forEach(item => {
        item.classList.remove('active');
    });
    
    const selectedItem = document.querySelector(`.chat-item[onclick="selectListenerChat('${chatId}')"]`);
    if (selectedItem) {
        selectedItem.classList.add('active');
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á–∞—Ç
    document.getElementById('listenerChatsTab').classList.add('hidden');
    document.getElementById('listenerChatSection').classList.remove('hidden');
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    loadListenerChatMessages();
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if (!chatStartTime) {
        chatStartTime = new Date(chat.startTime);
        startChatTimer();
    }
    
    showNotification('üí¨ –ß–∞—Ç –≤—ã–±—Ä–∞–Ω', 'info');
}

function updateListenerReviewsData() {
    const container = document.getElementById('listenerReviewsList');
    if (!container) return;
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º –æ—Ü–µ–Ω–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å–ª—É—à–∞—Ç–µ–ª—è
    const listenerRatings = ratings.filter(r => r.listenerId === currentUser.id);
    
    console.log('‚≠ê –û—Ç–∑—ã–≤—ã —Å–ª—É—à–∞—Ç–µ–ª—è:', listenerRatings.length);
    
    if (listenerRatings.length === 0) {
        container.innerHTML = `
            <div class="empty-state">
                <div class="empty-icon">‚≠ê</div>
                <div class="empty-title">–û—Ç–∑—ã–≤—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç</div>
                <div class="empty-subtitle">–í–∞—à–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –µ—â–µ –Ω–µ –æ—Å—Ç–∞–≤–∏–ª–∏ –æ—Ç–∑—ã–≤–æ–≤</div>
            </div>
        `;
        return;
    }
    
    container.innerHTML = listenerRatings.map(rating => {
        const user = users.find(u => u.id === rating.userId);
        const stars = '‚òÖ'.repeat(rating.rating) + '‚òÜ'.repeat(5 - rating.rating);
        
        return `
            <div class="review-item">
                <div class="review-header">
                    <div class="reviewer-info">
                        <span class="reviewer-avatar">${user ? (user.avatar || 'üë§') : 'üë§'}</span>
                        <div>
                            <div class="reviewer-name">${user ? (user.displayName || user.username) : '–ê–Ω–æ–Ω–∏–º'}</div>
                            <div class="review-date">${new Date(rating.timestamp).toLocaleDateString('ru-RU')}</div>
                        </div>
                    </div>
                    <div class="review-rating">
                        <span class="stars">${stars}</span>
                        <span class="rating-value">${rating.rating}.0</span>
                    </div>
                </div>
                <div class="review-comment">${rating.comment || '–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è'}</div>
            </div>
        `;
    }).join('');
}

function updateListenerStats() {
    console.log('üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–ª—É—à–∞—Ç–µ–ª—è');
    
    if (!currentUser) return;
    
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const listenerChats = chats.filter(chat => chat.user2 === currentUser.id);
    const completedChats = listenerChats.filter(chat => !chat.isActive).length;
    const activeChats = listenerChats.filter(chat => chat.isActive).length;
    const totalMessages = listenerChats.reduce((total, chat) => total + (chat.messages?.length || 0), 0);
    const avgMessagesPerChat = completedChats > 0 ? (totalMessages / completedChats).toFixed(1) : 0;
    
    // –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ (–∑–∞–≥–ª—É—à–∫–∞)
    const avgResponseTime = '45—Å';
    
    // –û–±—â–µ–µ –≤—Ä–µ–º—è –æ–Ω–ª–∞–π–Ω (–∑–∞–≥–ª—É—à–∫–∞)
    const totalOnlineTime = '2—á 15–º';
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
    const stats = [
        { id: 'listenerTotalChats', value: completedChats },
        { id: 'listenerActiveChats', value: activeChats },
        { id: 'listenerAvgRating', value: (currentUser.rating || 0).toFixed(1) },
        { id: 'listenerTotalMessages', value: totalMessages },
        { id: 'listenerAvgMessages', value: avgMessagesPerChat },
        { id: 'listenerResponseTime', value: avgResponseTime },
        { id: 'listenerOnlineTime', value: totalOnlineTime }
    ];
    
    stats.forEach(stat => {
        const element = document.getElementById(stat.id);
        if (element) {
            element.textContent = stat.value;
        }
    });
}

function updateUserNotifications() {
    const container = document.getElementById('userNotificationsList');
    if (!container) return;
    
    const userNotifications = notifications.filter(notification => 
        notification.recipients === 'all' || notification.recipients === 'users'
    );
    
    if (userNotifications.length === 0) {
        container.innerHTML = `
            <div class="empty-state">
                <div class="empty-icon">üì≠</div>
                <div class="empty-title">–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç</div>
                <div class="empty-subtitle">–ó–¥–µ—Å—å –±—É–¥—É—Ç –ø–æ—è–≤–ª—è—Ç—å—Å—è –≤–∞–∂–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</div>
            </div>
        `;
        return;
    }
    
    container.innerHTML = userNotifications.map(notification => `
        <div class="notification-item">
            <div class="notification-header">
                <div class="notification-title">${notification.title}</div>
                <div class="notification-type ${notification.type}"></div>
            </div>
            <div class="notification-text">${notification.text}</div>
            <div class="notification-footer">
                <span class="notification-date">${new Date(notification.timestamp).toLocaleString('ru-RU')}</span>
            </div>
        </div>
    `).join('');
}

function updateListenerNotifications() {
    const container = document.getElementById('listenerNotificationsList');
    if (!container) return;
    
    const listenerNotifications = notifications.filter(notification => 
        notification.recipients === 'all' || notification.recipients === 'listeners'
    );
    
    if (listenerNotifications.length === 0) {
        container.innerHTML = `
            <div class="empty-state">
                <div class="empty-icon">üì≠</div>
                <div class="empty-title">–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç</div>
                <div class="empty-subtitle">–ó–¥–µ—Å—å –±—É–¥—É—Ç –ø–æ—è–≤–ª—è—Ç—å—Å—è –≤–∞–∂–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</div>
            </div>
        `;
        return;
    }
    
    container.innerHTML = listenerNotifications.map(notification => `
        <div class="notification-item">
            <div class="notification-header">
                <div class="notification-title">${notification.title}</div>
                <div class="notification-type ${notification.type}"></div>
            </div>
            <div class="notification-text">${notification.text}</div>
            <div class="notification-footer">
                <span class="notification-date">${new Date(notification.timestamp).toLocaleString('ru-RU')}</span>
            </div>
        </div>
    `).join('');
}

// –§—É–Ω–∫—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
function showUserSettings() {
    showUserTab('settings');
}

function showListenerSettings() {
    showListenerTab('settings');
}

function loadUserSettings() {
    if (!currentUser) return;
    
    const elements = [
        { id: 'userProfileName', value: currentUser.displayName || '' },
        { id: 'userProfileEmail', value: currentUser.email || '' },
        { id: 'userProfileAvatar', value: currentUser.avatar || 'üë§' }
    ];
    
    elements.forEach(element => {
        const el = document.getElementById(element.id);
        if (el) {
            el.value = element.value;
        }
    });
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    if (currentUser.settings) {
        const settings = currentUser.settings;
        document.getElementById('userNotifications').checked = settings.notifications !== false;
        document.getElementById('userSound').checked = settings.sound !== false;
        
        const themeSelect = document.getElementById('userTheme');
        if (themeSelect) {
            themeSelect.value = settings.theme || 'light';
        }
    }
}

function loadListenerSettings() {
    if (!currentUser) return;
    
    const elements = [
        { id: 'listenerProfileName', value: currentUser.displayName || '' },
        { id: 'listenerProfileEmail', value: currentUser.email || '' },
        { id: 'listenerProfileAvatar', value: currentUser.avatar || 'üéß' }
    ];
    
    elements.forEach(element => {
        const el = document.getElementById(element.id);
        if (el) {
            el.value = element.value;
        }
    });
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    if (currentUser.settings) {
        const settings = currentUser.settings;
        document.getElementById('listenerNotifications').checked = settings.notifications !== false;
        document.getElementById('listenerSound').checked = settings.sound !== false;
        
        const themeSelect = document.getElementById('listenerTheme');
        if (themeSelect) {
            themeSelect.value = settings.theme || 'light';
        }
    }
}

function saveUserProfile() {
    const displayName = document.getElementById('userProfileName').value.trim();
    const email = document.getElementById('userProfileEmail').value.trim();
    const avatar = document.getElementById('userProfileAvatar').value.trim();
    const newPassword = document.getElementById('userProfilePassword').value;
    const notifications = document.getElementById('userNotifications').checked;
    const sound = document.getElementById('userSound').checked;
    const theme = document.getElementById('userTheme').value;

    const updates = {
        displayName: displayName || currentUser.username,
        email: email,
        avatar: avatar,
        settings: {
            ...currentUser.settings,
            notifications: notifications,
            sound: sound,
            theme: theme
        }
    };

    if (newPassword) {
        updates.password = newPassword;
    }

    if (socket && socket.connected) {
        socket.emit('update_profile', {
            userId: currentUser.id,
            ...updates
        });
        
        // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –ø–∞—Ä–æ–ª—è
        document.getElementById('userProfilePassword').value = '';
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–º—É
        localStorage.setItem('theme', theme);
        document.body.setAttribute('data-theme', theme);
    }
}

function saveListenerProfile() {
    const displayName = document.getElementById('listenerProfileName').value.trim();
    const email = document.getElementById('listenerProfileEmail').value.trim();
    const avatar = document.getElementById('listenerProfileAvatar').value.trim();
    const newPassword = document.getElementById('listenerProfilePassword').value;
    const notifications = document.getElementById('listenerNotifications').checked;
    const sound = document.getElementById('listenerSound').checked;
    const theme = document.getElementById('listenerTheme').value;

    const updates = {
        displayName: displayName || currentUser.username,
        email: email,
        avatar: avatar,
        settings: {
            ...currentUser.settings,
            notifications: notifications,
            sound: sound,
            theme: theme
        }
    };

    if (newPassword) {
        updates.password = newPassword;
    }

    if (socket && socket.connected) {
        socket.emit('update_profile', {
            userId: currentUser.id,
            ...updates
        });
        
        // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –ø–∞—Ä–æ–ª—è
        document.getElementById('listenerProfilePassword').value = '';
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–º—É
        localStorage.setItem('theme', theme);
        document.body.setAttribute('data-theme', theme);
    }
}

function updateRatingsUI() {
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥–∏ –≤ –∫–∞—Ä—Ç–æ—á–∫–∞—Ö —Å–ª—É—à–∞—Ç–µ–ª–µ–π
    if (currentUser && currentUser.role === 'user') {
        loadListenerCards();
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–∑—ã–≤—ã —Å–ª—É—à–∞—Ç–µ–ª—è
    if (currentUser && currentUser.role === 'listener') {
        updateListenerReviewsData();
        updateListenerStats();
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª—É—à–∞—Ç–µ–ª—è
document.addEventListener('DOMContentLoaded', function() {
    // –ü–æ–∫–∞–∑–∞—Ç—å —á–∞—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if (document.getElementById('listenerInterface').style.display === 'block') {
        showListenerTab('chats');
    }
});
