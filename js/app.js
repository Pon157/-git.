// –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
document.addEventListener('DOMContentLoaded', function() {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
    initializeApp();
});

function initializeApp() {
    setupEventListeners();
    loadUserPreferences();
    connectToServer();
}

function setupEventListeners() {
    console.log('üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π...');
    
    // –¢–∞–±—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    document.querySelectorAll('.tab').forEach(tab => {
        tab.addEventListener('click', function() {
            const tabName = this.getAttribute('data-tab');
            showAuthTab(tabName);
        });
    });

    // –¢–∞–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    document.querySelectorAll('#userInterface .tab').forEach(tab => {
        tab.addEventListener('click', function() {
            const tabName = this.getAttribute('data-tab');
            showUserTab(tabName);
        });
    });

    // –¢–∞–±—ã —Å–ª—É—à–∞—Ç–µ–ª—è
    document.querySelectorAll('#listenerInterface .tab').forEach(tab => {
        tab.addEventListener('click', function() {
            const tabName = this.getAttribute('data-tab');
            showListenerTab(tabName);
        });
    });

    // –ö–Ω–æ–ø–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const loginBtn = document.getElementById('loginBtn');
    const registerBtn = document.getElementById('registerBtn');
    
    if (loginBtn) {
        loginBtn.addEventListener('click', function(e) {
            e.preventDefault();
            e.stopPropagation();
            console.log('üñ±Ô∏è –ö–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥–∞ –Ω–∞–∂–∞—Ç–∞');
            login();
        });
    }
    
    if (registerBtn) {
        registerBtn.addEventListener('click', function(e) {
            e.preventDefault();
            e.stopPropagation();
            console.log('üñ±Ô∏è –ö–Ω–æ–ø–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞–∂–∞—Ç–∞');
            register();
        });
    }

    // –ù–∞–≤–∏–≥–∞—Ü–∏—è –≤ –∞–¥–º–∏–Ω–∫–µ
    document.querySelectorAll('.nav-item').forEach(item => {
        item.addEventListener('click', function() {
            const section = this.getAttribute('data-section');
            showSection(section);
        });
    });

    // –†–µ–π—Ç–∏–Ω–≥
    document.querySelectorAll('.rating-star').forEach(star => {
        star.addEventListener('click', function() {
            selectedRating = parseInt(this.getAttribute('data-rating'));
            updateRatingStars(selectedRating);
        });
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Enter
    const authPassword = document.getElementById('authPassword');
    const userMessageInput = document.getElementById('userMessageInput');
    const listenerMessageInput = document.getElementById('listenerMessageInput');
    const regPasswordConfirm = document.getElementById('regPasswordConfirm');
    
    if (authPassword) {
        authPassword.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                e.preventDefault();
                login();
            }
        });
    }
    
    if (userMessageInput) {
        userMessageInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                e.preventDefault();
                sendUserMessage();
            }
        });
    }

    if (listenerMessageInput) {
        listenerMessageInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                e.preventDefault();
                sendListenerMessage();
            }
        });
    }

    if (regPasswordConfirm) {
        regPasswordConfirm.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                e.preventDefault();
                register();
            }
        });
    }

    console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
}

function connectToServer() {
    try {
        console.log('üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É:', SERVER_URL);
        
        socket = io(SERVER_URL, {
            transports: ['websocket', 'polling'],
            timeout: 10000,
            reconnection: true,
            reconnectionAttempts: 10,
            reconnectionDelay: 1000,
            reconnectionDelayMax: 5000
        });

        socket.on('connect', () => {
            console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Å–µ—Ä–≤–µ—Ä—É');
            connectionRetries = 0;
            showNotification('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Å–µ—Ä–≤–µ—Ä—É', 'success');
            
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Å—Å–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å
            const savedUserId = localStorage.getItem('currentUserId');
            if (savedUserId) {
                console.log('üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', savedUserId);
                socket.emit('restore_session', { userId: savedUserId });
            }
        });

        socket.on('disconnect', (reason) => {
            console.log('‚ùå –û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', reason);
            if (reason === 'io server disconnect') {
                // –°–µ—Ä–≤–µ—Ä –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–∫–ª—é—á–∏–ª, –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
                setTimeout(() => {
                    socket.connect();
                }, 1000);
            }
        });

        socket.on('connect_error', (error) => {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error);
            connectionRetries++;
            
            if (connectionRetries <= MAX_RETRIES) {
                console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ${connectionRetries}/${MAX_RETRIES}`);
                setTimeout(() => {
                    socket.connect();
                }, 2000);
            } else {
                showNotification('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.', 'error');
            }
        });

        socket.on('reconnect', (attemptNumber) => {
            console.log('üîÅ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, –ø–æ–ø—ã—Ç–∫–∞:', attemptNumber);
            showNotification('‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ', 'success');
            
            const savedUserId = localStorage.getItem('currentUserId');
            if (savedUserId && currentUser) {
                socket.emit('restore_session', { userId: savedUserId });
            }
        });

        socket.on('reconnect_attempt', (attemptNumber) => {
            console.log('üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', attemptNumber);
        });

        socket.on('reconnect_error', (error) => {
            console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error);
        });

        socket.on('reconnect_failed', () => {
            console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è');
            showNotification('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.', 'error');
        });

        // –û–°–ù–û–í–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô
        socket.on('login_success', (data) => {
            console.log('‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥:', data.user);
            handleLoginSuccess(data.user);
        });

        socket.on('login_error', (error) => {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error);
            showNotification('‚ùå ' + error, 'error');
        });

        socket.on('registration_success', (data) => {
            console.log('‚úÖ –£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:', data.user);
            showNotification('‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!', 'success');
            handleLoginSuccess(data.user);
        });

        socket.on('registration_error', (error) => {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
            showNotification('‚ùå ' + error, 'error');
        });

        socket.on('session_restored', (data) => {
            if (data.user) {
                console.log('üîÑ –°–µ—Å—Å–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞:', data.user);
                handleLoginSuccess(data.user);
            }
        });

        // –î–ê–ù–ù–´–ï
        socket.on('users_list', (data) => {
            console.log('üìä –ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', data.users?.length);
            users = data.users || [];
            updateUsersUI();
        });

        socket.on('chats_list', (data) => {
            console.log('üí¨ –ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤:', data.chats?.length);
            chats = data.chats || [];
            updateChatsUI();
        });

        socket.on('ratings_list', (data) => {
            console.log('‚≠ê –ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤:', data.ratings?.length);
            ratings = data.ratings || [];
            updateRatingsUI();
        });

        socket.on('notifications_list', (data) => {
            console.log('üì¢ –ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', data.notifications?.length);
            notifications = data.notifications || [];
            updateNotificationsUI();
        });

        socket.on('new_message', (data) => {
            console.log('üì® –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', data);
            handleNewMessage(data);
        });

        socket.on('chat_created', (data) => {
            console.log('üí¨ –ß–∞—Ç —Å–æ–∑–¥–∞–Ω:', data.chat);
            const existingChat = chats.find(chat => chat.id === data.chat.id);
            if (!existingChat) {
                chats.push(data.chat);
            }
            activeChat = data.chat;
            updateChatsUI();
            showNotification(`üí¨ –ß–∞—Ç –Ω–∞—á–∞—Ç —Å ${data.listenerName}`, 'success');
            
            // –§–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            setTimeout(() => {
                const input = document.getElementById('userMessageInput');
                if (input) input.focus();
            }, 100);
        });

        socket.on('user_connected', (data) => {
            console.log('üîó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è:', data.user);
            const existingIndex = users.findIndex(u => u.id === data.user.id);
            if (existingIndex !== -1) {
                users[existingIndex] = { ...users[existingIndex], ...data.user, isOnline: true };
            } else {
                users.push({ ...data.user, isOnline: true });
            }
            updateUsersUI();
        });

        socket.on('user_disconnected', (data) => {
            console.log('üîå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª—é—á–∏–ª—Å—è:', data.userId);
            const user = users.find(u => u.id === data.userId);
            if (user) {
                user.isOnline = false;
            }
            updateUsersUI();
        });

        socket.on('user_updated', (data) => {
            console.log('üìù –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω:', data.user);
            const existingIndex = users.findIndex(u => u.id === data.user.id);
            if (existingIndex !== -1) {
                users[existingIndex] = data.user;
            }
            updateUsersUI();
        });

        socket.on('rating_submitted', (data) => {
            console.log('‚≠ê –†–µ–π—Ç–∏–Ω–≥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω:', data);
            showNotification('‚≠ê –†–µ–π—Ç–∏–Ω–≥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!', 'success');
            const listener = users.find(u => u.id === data.listenerId);
            if (listener) {
                listener.rating = data.newRating;
                listener.ratingCount = data.ratingCount;
            }
            updateUsersUI();
        });

        socket.on('rating_received', (data) => {
            console.log('‚≠ê –ü–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π –æ—Ç–∑—ã–≤:', data);
            updateListenerReviewsData();
        });

        socket.on('staff_added', (data) => {
            console.log('‚ûï –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω:', data);
            showNotification('‚úÖ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω', 'success');
            socket.emit('get_users');
        });

        socket.on('staff_add_error', (error) => {
            console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:', error);
            showNotification('‚ùå ' + error, 'error');
        });

        socket.on('role_changed', (data) => {
            console.log('üé≠ –†–æ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞:', data);
            showNotification(`‚úÖ –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ ${getRoleDisplayName(data.newRole)}`, 'success');
            socket.emit('get_users');
        });

        socket.on('chat_ended', (data) => {
            console.log('üö™ –ß–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω:', data.chatId);
            const chat = chats.find(c => c.id === data.chatId);
            if (chat) {
                chat.isActive = false;
            }
            if (activeChat && activeChat.id === data.chatId) {
                endChat();
            }
            updateChatsUI();
        });

        socket.on('profile_updated', (data) => {
            console.log('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω:', data.user);
            currentUser = data.user;
            localStorage.setItem('currentUser', JSON.stringify(data.user));
            updateUserInterface();
            showNotification('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω', 'success');
        });

        socket.on('profile_update_error', (error) => {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error);
            showNotification('‚ùå ' + error, 'error');
        });

        socket.on('notification_sent', (data) => {
            console.log('üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', data);
            showNotification('‚úÖ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ', 'success');
            socket.emit('get_notifications');
        });

        socket.on('new_notification', (data) => {
            console.log('üì¢ –ù–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:', data);
            notifications.unshift(data.notification);
            updateNotificationsUI();
            showNotification(`üì¢ –ù–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: ${data.notification.title}`, 'info');
        });

        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        setTimeout(() => {
            if (socket.connected) {
                socket.emit('get_users');
                socket.emit('get_chats');
                socket.emit('get_ratings');
                socket.emit('get_notifications');
            }
        }, 1000);

    } catch (error) {
        console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏:', error);
    }
}

function updateUsersUI() {
    if (!currentUser) return;

    if (currentUser.role === 'user') {
        loadListenerCards();
    } else if (currentUser.role === 'listener') {
        updateListenerChatsList();
        updateListenerReviewsData();
        updateListenerStats();
    } else if (currentUser.role === 'admin') {
        updateAdminData();
    }
}

console.log('üéâ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏ –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ!');
