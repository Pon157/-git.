// auth.js
let currentUser = null;
let onlineTimeStart = null;
let onlineTimer = null;

const auth = {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    init() {
        console.log('üîê –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...');
        
        // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
        const savedUser = localStorage.getItem('currentUser');
        const savedUserId = localStorage.getItem('currentUserId');
        
        if (savedUser && savedUserId) {
            try {
                currentUser = JSON.parse(savedUser);
                console.log('üîÑ –ù–∞–π–¥–µ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è:', currentUser.username);
                
                // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                if (socket && socket.connected) {
                    socket.emit('restore_session', { userId: savedUserId });
                }
            } catch (e) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏:', e);
                localStorage.removeItem('currentUser');
                localStorage.removeItem('currentUserId');
            }
        }
        
        this.setupAuthEventListeners();
    },

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    setupAuthEventListeners() {
        console.log('üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...');
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤—Ö–æ–¥–∞
        const loginBtn = document.getElementById('loginBtn');
        if (loginBtn) {
            loginBtn.addEventListener('click', () => {
                console.log('üñ±Ô∏è –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –≤—Ö–æ–¥–∞');
                this.login();
            });
        }
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        const registerBtn = document.getElementById('registerBtn');
        if (registerBtn) {
            registerBtn.addEventListener('click', () => {
                console.log('üñ±Ô∏è –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
                this.register();
            });
        }
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ç–∞–±–æ–≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        document.querySelectorAll('.tab[data-tab]').forEach(tab => {
            tab.addEventListener('click', (e) => {
                const tabName = e.target.getAttribute('data-tab');
                console.log('üîÄ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–∞–±–∞:', tabName);
                this.showAuthTab(tabName);
            });
        });
        
        console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
    },

    // –ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞–± –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    showAuthTab(tabName) {
        console.log('üîÄ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Ç–∞–±:', tabName);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∞–±—ã
        document.querySelectorAll('.tab').forEach(tab => {
            tab.classList.toggle('active', tab.getAttribute('data-tab') === tabName);
        });

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ä–º—ã
        if (tabName === 'login') {
            document.getElementById('loginForm').classList.remove('hidden');
            document.getElementById('registerForm').classList.add('hidden');
        } else {
            document.getElementById('loginForm').classList.add('hidden');
            document.getElementById('registerForm').classList.remove('hidden');
        }
    },

    // –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É
    login() {
        console.log('=== –í–´–ó–í–ê–ù–ê –§–£–ù–ö–¶–ò–Ø LOGIN ===');
        
        const usernameInput = document.getElementById('authUsername');
        const passwordInput = document.getElementById('authPassword');
        
        if (!usernameInput || !passwordInput) {
            utils.showNotification('‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º—ã!', 'error');
            return;
        }

        const username = usernameInput.value.trim();
        const password = passwordInput.value.trim();

        console.log('üìù –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:', { username, password: password ? '***' : 'empty' });

        if (!username || !password) {
            utils.showNotification('‚ùå –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!', 'error');
            return;
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
        const loginBtn = document.getElementById('loginBtn');
        let originalText = '';
        if (loginBtn) {
            originalText = loginBtn.innerHTML;
            loginBtn.innerHTML = '<div class="loading"></div><span>–í—Ö–æ–¥...</span>';
            loginBtn.disabled = true;
        }

        if (socket && socket.connected) {
            console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—Ö–æ–¥...');
            socket.emit('login', { username, password });
        } else {
            console.error('‚ùå –°–æ–∫–µ—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω');
            utils.showNotification('‚ùå –ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º', 'error');
            
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
            if (loginBtn) {
                setTimeout(() => {
                    loginBtn.innerHTML = originalText;
                    loginBtn.disabled = false;
                }, 2000);
            }
        }
    },

    // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
    register() {
        console.log('=== –í–´–ó–í–ê–ù–ê –§–£–ù–ö–¶–ò–Ø REGISTER ===');
        
        const usernameInput = document.getElementById('regUsername');
        const passwordInput = document.getElementById('regPassword');
        const passwordConfirmInput = document.getElementById('regPasswordConfirm');
        
        if (!usernameInput || !passwordInput || !passwordConfirmInput) {
            utils.showNotification('‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º—ã!', 'error');
            return;
        }

        const username = usernameInput.value.trim();
        const password = passwordInput.value.trim();
        const passwordConfirm = passwordConfirmInput.value.trim();

        console.log('üìù –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', { username, password: password ? '***' : 'empty' });

        if (!username || !password || !passwordConfirm) {
            utils.showNotification('‚ùå –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!', 'error');
            return;
        }

        if (password !== passwordConfirm) {
            utils.showNotification('‚ùå –ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç!', 'error');
            return;
        }

        if (password.length < 6) {
            utils.showNotification('‚ùå –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 6 —Å–∏–º–≤–æ–ª–æ–≤!', 'error');
            return;
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
        const registerBtn = document.getElementById('registerBtn');
        let originalText = '';
        if (registerBtn) {
            originalText = registerBtn.innerHTML;
            registerBtn.innerHTML = '<div class="loading"></div><span>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è...</span>';
            registerBtn.disabled = true;
        }

        if (socket && socket.connected) {
            console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é...');
            socket.emit('register', { 
                username, 
                password,
                role: 'user'
            });
        } else {
            console.error('‚ùå –°–æ–∫–µ—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω!');
            utils.showNotification('‚ùå –ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º', 'error');
            
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
            if (registerBtn) {
                setTimeout(() => {
                    registerBtn.innerHTML = originalText;
                    registerBtn.disabled = false;
                }, 2000);
            }
        }
    },

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—Ö–æ–¥–∞
    handleLoginSuccess(user) {
        console.log('üéâ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', user);
        currentUser = user;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é
        localStorage.setItem('currentUserId', user.id);
        localStorage.setItem('currentUser', JSON.stringify(user));
        
        utils.showNotification(`‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${user.displayName || user.username}!`, 'success');
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏
        this.restoreAuthButtons();
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –æ–Ω–ª–∞–π–Ω
        this.startOnlineTimer();
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ —Ä–æ–ª–∏
        if (user.role === 'user') {
            this.showUserInterface();
        } else if (user.role === 'listener') {
            this.showListenerInterface();
        } else if (user.role === 'admin' || user.role === 'owner') {
            this.showAdminPanel();
        }
    },

    // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    restoreAuthButtons() {
        const loginBtn = document.getElementById('loginBtn');
        const registerBtn = document.getElementById('registerBtn');
        
        if (loginBtn) {
            loginBtn.innerHTML = '<span>üö™ –í–æ–π—Ç–∏</span>';
            loginBtn.disabled = false;
        }
        if (registerBtn) {
            registerBtn.innerHTML = '<span>üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è</span>';
            registerBtn.disabled = false;
        }
    },

    // –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    showUserInterface() {
        console.log('üë§ –ü–æ–∫–∞–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        utils.hideAllInterfaces();
        document.getElementById('userInterface').style.display = 'block';
        
        document.getElementById('userDisplayName').textContent = currentUser.displayName || currentUser.username;
        document.getElementById('userRole').textContent = utils.getRoleDisplayName(currentUser.role);
        document.getElementById('userAvatar').textContent = currentUser.avatar || 'üë§';
        
        if (typeof userSettings !== 'undefined') {
            userSettings.showThemeSettings();
        }
        if (typeof listeners !== 'undefined') {
            listeners.loadCards();
        }
        if (typeof notifications !== 'undefined') {
            notifications.updateUserNotifications();
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∫–ª–∞–¥–∫—É —Å–ª—É—à–∞—Ç–µ–ª–µ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        this.showUserTab('listeners');
    },

    // –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å–ª—É—à–∞—Ç–µ–ª—è
    showListenerInterface() {
        console.log('üéß –ü–æ–∫–∞–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å–ª—É—à–∞—Ç–µ–ª—è');
        utils.hideAllInterfaces();
        document.getElementById('listenerInterface').style.display = 'block';
        
        document.getElementById('listenerDisplayName').textContent = currentUser.displayName || currentUser.username;
        document.getElementById('listenerRole').textContent = utils.getRoleDisplayName(currentUser.role);
        document.getElementById('listenerAvatar').textContent = currentUser.avatar || 'üë§';
        document.getElementById('listenerRatingValue').textContent = (currentUser.rating || 0).toFixed(1);
        document.getElementById('listenerRatingCount').textContent = currentUser.ratingCount || 0;
        
        if (typeof listenerSettings !== 'undefined') {
            listenerSettings.showThemeSettings();
        }
        if (typeof chat !== 'undefined') {
            chat.updateListenerChatsList();
            chat.updateListenerReviewsData();
            chat.updateListenerStats();
        }
        if (typeof notifications !== 'undefined') {
            notifications.updateListenerNotifications();
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∫–ª–∞–¥–∫—É —á–∞—Ç–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        this.showListenerTab('chats');
        
        this.startOnlineTimer();
    },

    // –ü–æ–∫–∞–∑–∞—Ç—å –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
    showAdminPanel() {
        console.log('üëë –ü–æ–∫–∞–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏');
        utils.hideAllInterfaces();
        document.getElementById('adminPanel').style.display = 'block';
        
        document.getElementById('adminDisplayName').textContent = currentUser.displayName || currentUser.username;
        document.getElementById('adminRole').textContent = utils.getRoleDisplayName(currentUser.role);
        
        if (typeof admin !== 'undefined') {
            admin.updateData();
        }
        if (typeof adminSettings !== 'undefined') {
            adminSettings.showThemeSettings();
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º dashboard –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if (typeof admin !== 'undefined') {
            admin.showSection('dashboard');
        }
    },

    // –ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞–± –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    showUserTab(tabName) {
        console.log('üë§ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Ç–∞–± –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', tabName);
        document.querySelectorAll('#userInterface .tab').forEach(tab => {
            tab.classList.toggle('active', tab.getAttribute('data-tab') === tabName);
        });

        document.getElementById('listenersTab').classList.toggle('hidden', tabName !== 'listeners');
        document.getElementById('userNotificationsTab').classList.toggle('hidden', tabName !== 'notifications');
        
        const userSettings = document.getElementById('userSettings');
        const userChatSection = document.getElementById('userChatSection');
        
        if (userSettings) userSettings.classList.add('hidden');
        if (userChatSection) userChatSection.classList.add('hidden');
    },

    // –ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞–± —Å–ª—É—à–∞—Ç–µ–ª—è
    showListenerTab(tabName) {
        console.log('üéß –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Ç–∞–± —Å–ª—É—à–∞—Ç–µ–ª—è:', tabName);
        document.querySelectorAll('#listenerInterface .tab').forEach(tab => {
            tab.classList.toggle('active', tab.getAttribute('data-tab') === tabName);
        });

        document.getElementById('listenerChatsTab').classList.toggle('hidden', tabName !== 'chats');
        document.getElementById('listenerReviewsTab').classList.toggle('hidden', tabName !== 'reviews');
        document.getElementById('listenerStatsTab').classList.toggle('hidden', tabName !== 'stats');
        document.getElementById('listenerNotificationsTab').classList.toggle('hidden', tabName !== 'notifications');
        
        const listenerSettings = document.getElementById('listenerSettings');
        if (listenerSettings) listenerSettings.classList.add('hidden');
    },

    // –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ –æ–Ω–ª–∞–π–Ω –≤—Ä–µ–º–µ–Ω–∏
    startOnlineTimer() {
        onlineTimeStart = new Date();
        clearInterval(onlineTimer);
        onlineTimer = setInterval(() => {
            if (onlineTimeStart) {
                const now = new Date();
                const diff = Math.floor((now - onlineTimeStart) / 1000 / 60 / 60);
                const onlineTimeElement = document.getElementById('listenerOnlineTime');
                if (onlineTimeElement) {
                    onlineTimeElement.textContent = diff + '—á';
                }
            }
        }, 60000);
    },

    // –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
    logout() {
        console.log('üö™ –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã');
        if (socket) {
            socket.disconnect();
        }
        localStorage.removeItem('currentUserId');
        localStorage.removeItem('currentUser');
        currentUser = null;
        
        if (typeof chat !== 'undefined') {
            clearInterval(chatTimer);
        }
        clearInterval(onlineTimer);
        
        utils.hideAllInterfaces();
        document.getElementById('authScreen').style.display = 'flex';
        utils.showNotification('üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å —Å–∫–æ—Ä–µ–µ!', 'success');
    }
};

console.log('üîê –ú–æ–¥—É–ª—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω');
