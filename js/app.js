// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let socket = null;
let currentUser = null;
let users = [];
let chats = [];
let ratings = [];
let notifications = [];
let systemSettings = {};
let activeChat = null;
let currentListener = null;
let chatStartTime = null;
let chatTimer = null;
let onlineTimer = null;
let messageIds = new Set();

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É
function connectToServer() {
    console.log('üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É...');
    
    socket = io({
        transports: ['websocket', 'polling'],
        timeout: 10000
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    socket.on('connect', () => {
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        showNotification('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Å–µ—Ä–≤–µ—Ä—É', 'success');
        tryRestoreSession();
    });

    socket.on('disconnect', (reason) => {
        console.log('‚ùå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', reason);
        showNotification('‚ùå –ü–æ—Ç–µ—Ä—è–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º', 'error');
    });

    socket.on('connect_error', (error) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error);
        showNotification('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É', 'error');
    });

    // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    socket.on('login_success', handleLoginSuccess);
    socket.on('login_error', (error) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error);
        showNotification(`‚ùå ${error}`, 'error');
        resetAuthButtons();
    });

    socket.on('registration_success', handleLoginSuccess);
    socket.on('registration_error', (error) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
        showNotification(`‚ùå ${error}`, 'error');
        resetAuthButtons();
    });

    socket.on('session_restored', (data) => {
        if (data.success) {
            handleLoginSuccess(data);
        } else {
            console.log('‚ùå –°–µ—Å—Å–∏—è –Ω–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
            localStorage.removeItem('currentUserId');
            localStorage.removeItem('currentUser');
        }
    });

    // –î–∞–Ω–Ω—ã–µ
    socket.on('users_list', (data) => {
        console.log('üìä –ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', data.users.length);
        users = data.users;
        updateUserInterfaces();
    });

    socket.on('chats_list', (data) => {
        console.log('üí¨ –ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤:', data.chats.length);
        chats = data.chats;
        updateChatsUI();
    });

    socket.on('ratings_list', (data) => {
        console.log('‚≠ê –ü–æ–ª—É—á–µ–Ω—ã –æ—Ü–µ–Ω–∫–∏:', data.ratings.length);
        ratings = data.ratings;
        updateRatingsUI();
    });

    socket.on('notifications_list', (data) => {
        console.log('üì¢ –ü–æ–ª—É—á–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', data.notifications.length);
        notifications = data.notifications;
        updateNotificationsUI();
    });

    socket.on('system_settings', (data) => {
        console.log('‚öôÔ∏è –ü–æ–ª—É—á–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã');
        systemSettings = data.settings;
        applySystemSettings();
    });

    // –ß–∞—Ç
    socket.on('chat_created', (data) => {
        console.log('üí¨ –ß–∞—Ç —Å–æ–∑–¥–∞–Ω:', data.chat);
        activeChat = data.chat;
        currentListener = data.partner;
        updateChatsUI();
        showNotification(`üí¨ –ß–∞—Ç –Ω–∞—á–∞—Ç —Å ${data.partner.displayName}`, 'success');
    });

    socket.on('chat_exists', (data) => {
        console.log('üí¨ –ß–∞—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
        activeChat = data.chat;
        updateChatsUI();
        showNotification('üí¨ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —á–∞—Ç', 'info');
    });

    socket.on('new_message', handleNewMessage);
    socket.on('chat_ended', (data) => {
        console.log('üîö –ß–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω:', data.chatId);
        if (activeChat && activeChat.id === data.chatId) {
            endChat();
        }
        updateChatsUI();
    });

    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    socket.on('user_connected', (data) => {
        console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è:', data.user.username);
        updateUserInList(data.user);
        updateUserInterfaces();
    });

    socket.on('user_disconnected', (data) => {
        console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª—é—á–∏–ª—Å—è:', data.userId);
        updateUserInList({ id: data.userId, isOnline: false });
        updateUserInterfaces();
    });

    socket.on('user_updated', (data) => {
        console.log('üë§ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã:', data.user.username);
        updateUserInList(data.user);
        updateUserInterfaces();
    });

    // –ê–¥–º–∏–Ω–∫–∞
    socket.on('staff_added', (data) => {
        console.log('‚ûï –î–æ–±–∞–≤–ª–µ–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫:', data.user.username);
        showNotification(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫: ${data.user.displayName}`, 'success');
        updateUserInterfaces();
    });

    socket.on('staff_add_error', (error) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:', error);
        showNotification(`‚ùå ${error}`, 'error');
    });

    socket.on('role_changed', (data) => {
        console.log('üé≠ –†–æ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞:', data.userId, data.newRole);
        showNotification(`‚úÖ –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ ${getRoleDisplayName(data.newRole)}`, 'success');
        updateUserInterfaces();
    });

    socket.on('role_change_error', (error) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–æ–ª–∏:', error);
        showNotification(`‚ùå ${error}`, 'error');
    });

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    socket.on('new_notification', (data) => {
        console.log('üì¢ –ù–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:', data.notification.title);
        showNotification(`üì¢ ${data.notification.title}: ${data.notification.text}`, 'info');
        updateNotificationsUI();
    });

    socket.on('notification_sent', (data) => {
        if (data.success) {
            showNotification('üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ', 'success');
            updateNotificationsUI();
        }
    });

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    socket.on('system_settings_updated', (data) => {
        console.log('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
        systemSettings = data.settings;
        applySystemSettings();
        showNotification('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã', 'success');
    });

    socket.on('system_settings_changed', (data) => {
        console.log('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã –∏–∑–º–µ–Ω–µ–Ω—ã');
        systemSettings = data.settings;
        applySystemSettings();
    });

    socket.on('settings_update_error', (error) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
        showNotification(`‚ùå ${error}`, 'error');
    });

    // –ü—Ä–æ—Ñ–∏–ª—å
    socket.on('profile_updated', (data) => {
        console.log('üë§ –ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω');
        currentUser = data.user;
        updateUserProfileUI();
        showNotification('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω', 'success');
    });

    socket.on('profile_update_error', (error) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error);
        showNotification(`‚ùå ${error}`, 'error');
    });

    // –†–µ–π—Ç–∏–Ω–≥–∏
    socket.on('rating_submitted', (data) => {
        console.log('‚≠ê –û—Ü–µ–Ω–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞');
        showNotification('‚≠ê –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É!', 'success');
        updateRatingsUI();
    });

    socket.on('rating_received', (data) => {
        console.log('‚≠ê –ü–æ–ª—É—á–µ–Ω–∞ –Ω–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞');
        showNotification(`‚≠ê –ù–æ–≤—ã–π –æ—Ç–∑—ã–≤: ${data.rating} –∑–≤–µ–∑–¥`, 'info');
        updateRatingsUI();
    });
}

// –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
function tryRestoreSession() {
    const savedUserId = localStorage.getItem('currentUserId');
    const savedUser = localStorage.getItem('currentUser');
    
    if (savedUserId && savedUser && socket.connected) {
        console.log('üîÑ –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏...');
        socket.emit('restore_session', { userId: savedUserId });
    } else {
        console.log('üîê –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø–æ–∫–∞–∑ —ç–∫—Ä–∞–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
        showAuthScreen();
    }
}

// –°–±—Ä–æ—Å –∫–Ω–æ–ø–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
function resetAuthButtons() {
    const loginBtn = document.getElementById('loginBtn');
    const registerBtn = document.getElementById('registerBtn');
    
    if (loginBtn) {
        loginBtn.innerHTML = '<span>üö™ –í–æ–π—Ç–∏</span>';
        loginBtn.disabled = false;
    }
    if (registerBtn) {
        registerBtn.innerHTML = '<span>üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è</span>';
        registerBtn.disabled = false;
    }
}

// –ü–æ–∫–∞–∑ —ç–∫—Ä–∞–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
function showAuthScreen() {
    hideAllInterfaces();
    document.getElementById('authScreen').style.display = 'flex';
}

// –°–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤
function hideAllInterfaces() {
    const interfaces = [
        'authScreen',
        'userInterface', 
        'listenerInterface',
        'adminPanel'
    ];
    
    interfaces.forEach(id => {
        const element = document.getElementById(id);
        if (element) {
            element.style.display = 'none';
        }
    });
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
function updateUserInterfaces() {
    if (!currentUser) return;

    if (currentUser.role === 'user') {
        loadListenerCards();
        updateUserNotifications();
    } else if (currentUser.role === 'listener') {
        updateListenerChatsList();
        updateListenerReviewsData();
        updateListenerStats();
        updateListenerNotifications();
    } else if (currentUser.role === 'admin' || currentUser.role === 'owner') {
        updateAdminData();
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–∫–µ
function updateUserInList(updatedUser) {
    const index = users.findIndex(u => u.id === updatedUser.id);
    if (index !== -1) {
        users[index] = { ...users[index], ...updatedUser };
    } else {
        users.push(updatedUser);
    }
}

// –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
function applySystemSettings() {
    if (systemSettings.siteTitle) {
        document.title = systemSettings.siteTitle;
        const titleElement = document.getElementById('systemTitle');
        if (titleElement) {
            titleElement.textContent = systemSettings.siteTitle;
        }
    }
    
    if (systemSettings.theme) {
        document.body.setAttribute('data-theme', systemSettings.theme);
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function getRoleDisplayName(role) {
    const roles = {
        'owner': 'üëë –í–ª–∞–¥–µ–ª–µ—Ü',
        'admin': '‚öôÔ∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä', 
        'listener': 'üéß –°–ª—É—à–∞—Ç–µ–ª—å',
        'user': 'üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
    };
    return roles[role] || role;
}

function showNotification(message, type = 'info') {
    console.log(`üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ [${type}]: ${message}`);
    
    // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const notification = document.createElement('div');
    notification.className = `notification notification-${type}`;
    notification.innerHTML = `
        <div class="notification-content">
            <span class="notification-message">${message}</span>
            <button class="notification-close" onclick="this.parentElement.parentElement.remove()">√ó</button>
        </div>
    `;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    const container = document.getElementById('notificationsContainer');
    if (container) {
        container.appendChild(notification);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            if (notification.parentElement) {
                notification.remove();
            }
        }, 5000);
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ –æ–Ω–ª–∞–π–Ω –≤—Ä–µ–º–µ–Ω–∏
function startOnlineTimer() {
    clearInterval(onlineTimer);
    const startTime = new Date();
    
    onlineTimer = setInterval(() => {
        if (!currentUser) return;
        
        const now = new Date();
        const diff = Math.floor((now - startTime) / 1000);
        const hours = Math.floor(diff / 3600);
        const minutes = Math.floor((diff % 3600) / 60);
        const seconds = diff % 60;
        
        const timeString = `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
        const onlineTimeElement = document.getElementById('onlineTime');
        if (onlineTimeElement) {
            onlineTimeElement.textContent = timeString;
        }
    }, 1000);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
    connectToServer();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if (!document.getElementById('notificationsContainer')) {
        const container = document.createElement('div');
        container.id = 'notificationsContainer';
        container.className = 'notifications-container';
        document.body.appendChild(container);
    }
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É –∏–∑ localStorage
    const savedTheme = localStorage.getItem('theme') || 'light';
    document.body.setAttribute('data-theme', savedTheme);
    
    console.log('‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
});

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è HTML
window.forceRefreshData = function() {
    if (socket && socket.connected) {
        socket.emit('force_refresh_data');
        showNotification('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...', 'info');
    }
};

window.logout = function() {
    console.log('üö™ –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã');
    
    if (socket) {
        socket.disconnect();
    }
    
    // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    localStorage.removeItem('currentUserId');
    localStorage.removeItem('currentUser');
    currentUser = null;
    users = [];
    chats = [];
    ratings = [];
    notifications = [];
    activeChat = null;
    currentListener = null;
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä—ã
    clearInterval(chatTimer);
    clearInterval(onlineTimer);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    hideAllInterfaces();
    document.getElementById('authScreen').style.display = 'flex';
    
    showNotification('üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å —Å–∫–æ—Ä–µ–µ!', 'success');
    
    // –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
    setTimeout(() => {
        connectToServer();
    }, 1000);
};
