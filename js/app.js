// –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
document.addEventListener('DOMContentLoaded', function() {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
    initializeApp();
});

function initializeApp() {
    setupEventListeners();
    loadUserPreferences();
    connectToServer();
}

function setupEventListeners() {
    console.log('üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π...');
    
    // –¢–∞–±—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    document.querySelectorAll('.tab').forEach(tab => {
        tab.addEventListener('click', function() {
            const tabName = this.getAttribute('data-tab');
            showAuthTab(tabName);
        });
    });

    // –ö–Ω–æ–ø–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ - –î–û–ë–ê–í–õ–Ø–ï–ú –ü–†–û–í–ï–†–ö–£ –°–£–©–ï–°–¢–í–û–í–ê–ù–ò–Ø –≠–õ–ï–ú–ï–ù–¢–û–í
    const loginBtn = document.getElementById('loginBtn');
    const registerBtn = document.getElementById('registerBtn');
    
    if (loginBtn) {
        console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥–∞ –Ω–∞–π–¥–µ–Ω–∞, –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫');
        loginBtn.addEventListener('click', function(e) {
            e.preventDefault();
            e.stopPropagation();
            console.log('üñ±Ô∏è –ö–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥–∞ –Ω–∞–∂–∞—Ç–∞');
            login();
        });
    } else {
        console.error('‚ùå –ö–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!');
    }
    
    if (registerBtn) {
        console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞–π–¥–µ–Ω–∞, –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫');
        registerBtn.addEventListener('click', function(e) {
            e.preventDefault();
            e.stopPropagation();
            console.log('üñ±Ô∏è –ö–Ω–æ–ø–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞–∂–∞—Ç–∞');
            register();
        });
    } else {
        console.error('‚ùå –ö–Ω–æ–ø–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!');
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Enter –¥–ª—è —Ñ–æ—Ä–º
    const authUsername = document.getElementById('authUsername');
    const authPassword = document.getElementById('authPassword');
    const regUsername = document.getElementById('regUsername');
    const regPassword = document.getElementById('regPassword');
    const regPasswordConfirm = document.getElementById('regPasswordConfirm');
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ Enter –¥–ª—è –ª–æ–≥–∏–Ω–∞
    if (authUsername && authPassword) {
        authUsername.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                e.preventDefault();
                login();
            }
        });
        
        authPassword.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                e.preventDefault();
                login();
            }
        });
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ Enter –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    if (regUsername && regPassword && regPasswordConfirm) {
        const registerFields = [regUsername, regPassword, regPasswordConfirm];
        registerFields.forEach(field => {
            field.addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    e.preventDefault();
                    register();
                }
            });
        });
    }

    console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
}

function connectToServer() {
    try {
        console.log('üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É:', SERVER_URL);
        
        socket = io(SERVER_URL, {
            transports: ['websocket', 'polling'],
            timeout: 10000,
            reconnection: true,
            reconnectionAttempts: 10,
            reconnectionDelay: 1000,
            reconnectionDelayMax: 5000
        });

        socket.on('connect', () => {
            console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Å–µ—Ä–≤–µ—Ä—É');
            connectionRetries = 0;
            showNotification('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Å–µ—Ä–≤–µ—Ä—É', 'success');
            
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Å—Å–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å
            const savedUserId = localStorage.getItem('currentUserId');
            if (savedUserId) {
                console.log('üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', savedUserId);
                socket.emit('restore_session', { userId: savedUserId });
            }
        });

        socket.on('disconnect', (reason) => {
            console.log('‚ùå –û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', reason);
            if (reason === 'io server disconnect') {
                // –°–µ—Ä–≤–µ—Ä –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–∫–ª—é—á–∏–ª, –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
                setTimeout(() => {
                    socket.connect();
                }, 1000);
            }
        });

        socket.on('connect_error', (error) => {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error);
            connectionRetries++;
            
            if (connectionRetries <= MAX_RETRIES) {
                console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ${connectionRetries}/${MAX_RETRIES}`);
                setTimeout(() => {
                    socket.connect();
                }, 2000);
            } else {
                showNotification('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.', 'error');
            }
        });

        socket.on('reconnect', (attemptNumber) => {
            console.log('üîÅ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, –ø–æ–ø—ã—Ç–∫–∞:', attemptNumber);
            showNotification('‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ', 'success');
            
            const savedUserId = localStorage.getItem('currentUserId');
            if (savedUserId && currentUser) {
                socket.emit('restore_session', { userId: savedUserId });
            }
        });

        // –û–°–ù–û–í–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô
        socket.on('login_success', (data) => {
            console.log('‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥:', data.user);
            handleLoginSuccess(data.user);
        });

        socket.on('login_error', (error) => {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error);
            showNotification('‚ùå ' + error, 'error');
            
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞
            const loginBtn = document.getElementById('loginBtn');
            if (loginBtn) {
                loginBtn.innerHTML = '<span>üö™ –í–æ–π—Ç–∏</span>';
                loginBtn.disabled = false;
            }
        });

        socket.on('registration_success', (data) => {
            console.log('‚úÖ –£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:', data.user);
            showNotification('‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!', 'success');
            handleLoginSuccess(data.user);
        });

        socket.on('registration_error', (error) => {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
            showNotification('‚ùå ' + error, 'error');
            
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            const registerBtn = document.getElementById('registerBtn');
            if (registerBtn) {
                registerBtn.innerHTML = '<span>üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è</span>';
                registerBtn.disabled = false;
            }
        });

        socket.on('session_restored', (data) => {
            if (data.user) {
                console.log('üîÑ –°–µ—Å—Å–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞:', data.user);
                handleLoginSuccess(data.user);
            }
        });

        // –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π...
        socket.on('users_list', (data) => {
            console.log('üìä –ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', data.users?.length);
            users = data.users || [];
            updateUsersUI();
        });

        socket.on('chats_list', (data) => {
            console.log('üí¨ –ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤:', data.chats?.length);
            chats = data.chats || [];
            updateChatsUI();
        });

        socket.on('new_message', (data) => {
            console.log('üì® –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', data);
            handleNewMessage(data);
        });

        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        setTimeout(() => {
            if (socket.connected) {
                socket.emit('get_users');
                socket.emit('get_chats');
                socket.emit('get_ratings');
                socket.emit('get_notifications');
            }
        }, 1000);

    } catch (error) {
        console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏:', error);
    }
}

function updateUsersUI() {
    if (!currentUser) return;

    if (currentUser.role === 'user') {
        loadListenerCards();
    } else if (currentUser.role === 'listener') {
        updateListenerChatsList();
        updateListenerReviewsData();
        updateListenerStats();
    } else if (currentUser.role === 'admin' || currentUser.role === 'owner') {
        updateAdminData();
    }
}

function loadUserPreferences() {
    const theme = localStorage.getItem('theme') || 'sunrise';
    const font = localStorage.getItem('font') || 'default';
    const fontSize = localStorage.getItem('fontSize') || 'normal';
    
    changeTheme(theme, false);
    changeFont(font, false);
    changeFontSize(fontSize, false);
}

console.log('üéâ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏ –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ!');
