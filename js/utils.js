// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let currentUser = null;
let socket = null;
let users = [];
let chats = [];
let ratings = [];
let notifications = [];
let activeChat = null;
let currentListener = null;
let chatStartTime = null;
let chatTimer = null;
let selectedRating = 0;
let currentSection = 'dashboard';
let onlineTimeStart = null;
let onlineTimer = null;
let messageIds = new Set();

const SERVER_URL = window.location.hostname === 'localhost' ? 'http://localhost:3000' : 'https://your-server-url.com';

// –£—Ç–∏–ª–∏—Ç—ã
function getRoleDisplayName(role) {
    const roles = {
        'admin': 'üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
        'listener': 'üéß –°–ª—É—à–∞—Ç–µ–ª—å', 
        'user': 'üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
    };
    return roles[role] || role;
}

function showNotification(message, type = 'info') {
    const notification = document.getElementById('notification');
    if (!notification) {
        console.error('‚ùå –≠–ª–µ–º–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω!');
        return;
    }
    
    notification.textContent = message;
    notification.className = `notification ${type} show`;
    
    setTimeout(() => {
        notification.classList.remove('show');
    }, 4000);
}

function hideAllInterfaces() {
    console.log('üéØ –°–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤');
    
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
    const interfaces = ['userInterface', 'listenerInterface', 'adminPanel'];
    interfaces.forEach(id => {
        const element = document.getElementById(id);
        if (element) {
            element.style.display = 'none';
            element.classList.add('hidden');
        }
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    const authScreen = document.getElementById('authScreen');
    if (authScreen) {
        authScreen.style.display = 'flex';
        authScreen.classList.remove('hidden');
    }
}

function logout() {
    console.log('üö™ –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã');
    if (socket) {
        socket.disconnect();
    }
    localStorage.removeItem('currentUserId');
    localStorage.removeItem('currentUser');
    currentUser = null;
    
    clearInterval(chatTimer);
    clearInterval(onlineTimer);
    
    hideAllInterfaces();
    showNotification('üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å —Å–∫–æ—Ä–µ–µ!', 'success');
}

function saveUserPreferences(theme, font, fontSize) {
    localStorage.setItem('theme', theme);
    localStorage.setItem('font', font);
    localStorage.setItem('fontSize', fontSize);
}

function loadUserPreferences() {
    const theme = localStorage.getItem('theme') || 'light';
    const font = localStorage.getItem('font') || 'default';
    const fontSize = localStorage.getItem('fontSize') || 'normal';
    
    return { theme, font, fontSize };
}

function updateRatingStars(rating) {
    const stars = document.querySelectorAll('.rating-star');
    stars.forEach((star, index) => {
        star.classList.toggle('active', index < rating);
    });
}

function getNotificationTypeDisplay(type) {
    const types = {
        'info': '‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
        'warning': '‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ', 
        'error': 'üî¥ –í–∞–∂–Ω–æ–µ'
    };
    return types[type] || type;
}

function getRecipientsDisplay(recipients) {
    const recipientsMap = {
        'all': 'üëã –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏',
        'users': 'üë§ –¢–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏',
        'listeners': 'üéß –¢–æ–ª—å–∫–æ —Å–ª—É—à–∞—Ç–µ–ª–∏',
        'admins': 'üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è'
    };
    return recipientsMap[recipients] || recipients;
}

function startOnlineTimer() {
    onlineTimeStart = new Date();
    clearInterval(onlineTimer);
    onlineTimer = setInterval(() => {
        if (onlineTimeStart) {
            const now = new Date();
            const diff = Math.floor((now - onlineTimeStart) / 1000 / 60 / 60);
            const onlineTimeElement = document.getElementById('listenerOnlineTime');
            if (onlineTimeElement) {
                onlineTimeElement.textContent = diff + '—á';
            }
        }
    }, 60000);
}

function startChatTimer() {
    clearInterval(chatTimer);
    chatTimer = setInterval(() => {
        if (!chatStartTime) return;
        const now = new Date();
        const diff = Math.floor((now - chatStartTime) / 1000);
        const minutes = Math.floor(diff / 60);
        const seconds = diff % 60;
        const durationElement = document.getElementById('chatDuration');
        if (durationElement) {
            durationElement.textContent = `${minutes}:${seconds.toString().padStart(2, '0')}`;
        }
    }, 1000);
}

function updateMessageCount() {
    if (activeChat && activeChat.messages) {
        const messageCountElement = document.getElementById('messageCount');
        if (messageCountElement) {
            messageCountElement.textContent = activeChat.messages.length;
        }
    }
}

function forceAdminForOwner() {
    if (currentUser && (currentUser.username === 'owner' || currentUser.role === 'admin')) {
        console.log('üîß –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω–∫—É –¥–ª—è:', currentUser.role);
        showAdminPanel();
        return true;
    }
    return false;
}

// –§—É–Ω–∫—Ü–∏–∏ –ø–æ–∫–∞–∑–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤
function showUserInterface() {
    console.log('üë§ –ü–æ–∫–∞–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    hideAllInterfaces();
    const userInterface = document.getElementById('userInterface');
    if (userInterface) {
        userInterface.style.display = 'block';
        userInterface.classList.remove('hidden');
    }
    
    updateUserInterface();
    showUserThemeSettings();
    loadListenerCards();
    updateUserNotifications();
}

function showListenerInterface() {
    console.log('üéß –ü–æ–∫–∞–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å–ª—É—à–∞—Ç–µ–ª—è');
    hideAllInterfaces();
    const listenerInterface = document.getElementById('listenerInterface');
    if (listenerInterface) {
        listenerInterface.style.display = 'block';
        listenerInterface.classList.remove('hidden');
    }
    
    updateListenerInterface();
    showListenerThemeSettings();
    updateListenerChatsList();
    updateListenerReviewsData();
    updateListenerStats();
    updateListenerNotifications();
    startOnlineTimer();
}

function showAdminPanel() {
    console.log('üëë –ü–æ–∫–∞–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏');
    hideAllInterfaces();
    const adminPanel = document.getElementById('adminPanel');
    if (adminPanel) {
        adminPanel.style.display = 'block';
        adminPanel.classList.remove('hidden');
    }
    
    updateAdminInterface();
    updateAdminData();
    showAdminThemeSettings();
}

function updateUserInterface() {
    if (!currentUser) return;
    
    const displayName = document.getElementById('userDisplayName');
    const role = document.getElementById('userRole');
    const avatar = document.getElementById('userAvatar');
    
    if (displayName) displayName.textContent = currentUser.displayName || currentUser.username;
    if (role) role.textContent = getRoleDisplayName(currentUser.role);
    if (avatar) avatar.textContent = currentUser.avatar || 'üë§';
}

function updateListenerInterface() {
    if (!currentUser) return;
    
    const displayName = document.getElementById('listenerDisplayName');
    const role = document.getElementById('listenerRole');
    const avatar = document.getElementById('listenerAvatar');
    const ratingValue = document.getElementById('listenerRatingValue');
    const ratingCount = document.getElementById('listenerRatingCount');
    
    if (displayName) displayName.textContent = currentUser.displayName || currentUser.username;
    if (role) role.textContent = getRoleDisplayName(currentUser.role);
    if (avatar) avatar.textContent = currentUser.avatar || 'üë§';
    if (ratingValue) ratingValue.textContent = (currentUser.rating || 0).toFixed(1);
    if (ratingCount) ratingCount.textContent = currentUser.ratingCount || 0;
}

function updateAdminInterface() {
    if (!currentUser) return;
    
    const displayName = document.getElementById('adminDisplayName');
    const role = document.getElementById('adminRole');
    
    if (displayName) displayName.textContent = currentUser.displayName || currentUser.username;
    if (role) role.textContent = getRoleDisplayName(currentUser.role);
}
