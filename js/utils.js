// –£—Ç–∏–ª–∏—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const utils = {
    // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    showNotification(message, type = 'info') {
        const notification = document.getElementById('notification');
        if (!notification) {
            // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            const notificationDiv = document.createElement('div');
            notificationDiv.id = 'notification';
            notificationDiv.className = 'notification';
            document.body.appendChild(notificationDiv);
        }
        
        const notifElement = document.getElementById('notification');
        notifElement.textContent = message;
        notifElement.className = `notification ${type} show`;
        
        setTimeout(() => {
            notifElement.classList.remove('show');
        }, 4000);
    },

    // –°–∫—Ä—ã—Ç—å –≤—Å–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
    hideAllInterfaces() {
        const interfaces = ['authScreen', 'userInterface', 'listenerInterface', 'adminPanel'];
        interfaces.forEach(id => {
            const element = document.getElementById(id);
            if (element) element.style.display = 'none';
        });
    },

    // –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è —Ä–æ–ª–∏
    getRoleDisplayName(role) {
        const roles = {
            'admin': 'üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
            'listener': 'üéß –°–ª—É—à–∞—Ç–µ–ª—å', 
            'user': 'üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
        };
        return roles[role] || role;
    },

    // –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    updateUserInterface() {
        if (!currentUser) return;

        const elements = [
            { id: 'userDisplayName', text: currentUser.displayName || currentUser.username },
            { id: 'listenerDisplayName', text: currentUser.displayName || currentUser.username },
            { id: 'adminDisplayName', text: currentUser.displayName || currentUser.username },
            { id: 'userAvatar', text: currentUser.avatar || 'üë§' },
            { id: 'listenerAvatar', text: currentUser.avatar || 'üë§' }
        ];

        elements.forEach(element => {
            this.updateElementText(element.id, element.text);
        });
    },

    // –û–±–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—Å—Ç —ç–ª–µ–º–µ–Ω—Ç–∞
    updateElementText(elementId, text) {
        const element = document.getElementById(elementId);
        if (element) element.textContent = text;
    },

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
    formatTime(date) {
        return new Date(date).toLocaleTimeString('ru-RU', { 
            hour: '2-digit', 
            minute: '2-digit' 
        });
    },

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
    formatDate(date) {
        return new Date(date).toLocaleDateString('ru-RU');
    },

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID
    generateId() {
        return Date.now().toString(36) + Math.random().toString(36).substr(2);
    },

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å–∞
    isUserOnline(userId) {
        const user = users.find(u => u.id === userId);
        return user ? user.isOnline : false;
    },

    // –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
    getUserById(userId) {
        return users.find(u => u.id === userId);
    },

    // –ü–æ–∫–∞–∑–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç
    showElement(id) {
        const element = document.getElementById(id);
        if (element) element.classList.remove('hidden');
    },

    // –°–∫—Ä—ã—Ç—å —ç–ª–µ–º–µ–Ω—Ç
    hideElement(id) {
        const element = document.getElementById(id);
        if (element) element.classList.add('hidden');
    },

    // –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
    showOnly(elementId) {
        const elementsToHide = ['listenersTab', 'userChatSection', 'userNotificationsTab', 'userSettings'];
        elementsToHide.forEach(id => this.hideElement(id));
        this.showElement(elementId);
    },

    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —ç–ª–µ–º–µ–Ω—Ç
    elementExists(id) {
        return !!document.getElementById(id);
    }
};
