// utils.js
const utils = {
    // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    showNotification(message, type = 'info', duration = 5000) {
        const notification = document.getElementById('notification');
        if (!notification) return;

        notification.textContent = message;
        notification.className = `notification ${type} show`;
        
        setTimeout(() => {
            notification.classList.remove('show');
        }, duration);
    },

    // –°–∫—Ä—ã—Ç—å –≤—Å–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
    hideAllInterfaces() {
        const interfaces = [
            'authScreen',
            'userInterface', 
            'listenerInterface',
            'adminPanel'
        ];
        
        interfaces.forEach(id => {
            const element = document.getElementById(id);
            if (element) {
                element.style.display = 'none';
            }
        });
    },

    // –ü–æ–∫–∞–∑–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç
    showElement(elementId) {
        const element = document.getElementById(elementId);
        if (element) {
            element.classList.remove('hidden');
        }
    },

    // –°–∫—Ä—ã—Ç—å —ç–ª–µ–º–µ–Ω—Ç
    hideElement(elementId) {
        const element = document.getElementById(elementId);
        if (element) {
            element.classList.add('hidden');
        }
    },

    // –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è —Ä–æ–ª–∏
    getRoleDisplayName(role) {
        const roles = {
            'user': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
            'listener': '–°–ª—É—à–∞—Ç–µ–ª—å', 
            'admin': '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
            'owner': '–í–ª–∞–¥–µ–ª–µ—Ü'
        };
        return roles[role] || role;
    },

    // –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    updateUserInterface() {
        if (!currentUser) return;
        
        if (currentUser.role === 'user') {
            const displayName = document.getElementById('userDisplayName');
            const role = document.getElementById('userRole');
            const avatar = document.getElementById('userAvatar');
            
            if (displayName) displayName.textContent = currentUser.displayName || currentUser.username;
            if (role) role.textContent = this.getRoleDisplayName(currentUser.role);
            if (avatar) avatar.textContent = currentUser.avatar || 'üë§';
        } else if (currentUser.role === 'listener') {
            const displayName = document.getElementById('listenerDisplayName');
            const role = document.getElementById('listenerRole');
            const avatar = document.getElementById('listenerAvatar');
            const ratingValue = document.getElementById('listenerRatingValue');
            const ratingCount = document.getElementById('listenerRatingCount');
            
            if (displayName) displayName.textContent = currentUser.displayName || currentUser.username;
            if (role) role.textContent = this.getRoleDisplayName(currentUser.role);
            if (avatar) avatar.textContent = currentUser.avatar || 'üë§';
            if (ratingValue) ratingValue.textContent = (currentUser.rating || 0).toFixed(1);
            if (ratingCount) ratingCount.textContent = currentUser.ratingCount || 0;
        }
    },

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
    formatTime(dateString) {
        const date = new Date(dateString);
        return date.toLocaleTimeString('ru-RU', { 
            hour: '2-digit', 
            minute: '2-digit' 
        });
    },

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
    formatDate(dateString) {
        const date = new Date(dateString);
        return date.toLocaleDateString('ru-RU', {
            day: '2-digit',
            month: '2-digit',
            year: 'numeric'
        });
    },

    // –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML
    escapeHtml(unsafe) {
        return unsafe
            .replace(/&/g, "&amp;")
            .replace(/</g, "&lt;")
            .replace(/>/g, "&gt;")
            .replace(/"/g, "&quot;")
            .replace(/'/g, "&#039;");
    }
};

console.log('üîß –£—Ç–∏–ª–∏—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
