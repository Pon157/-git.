// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —á–∞—Ç–æ–º
function setupChatEventListeners() {
    console.log('üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —á–∞—Ç–∞...');
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Enter –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
    const userMessageInput = document.getElementById('userMessageInput');
    const listenerMessageInput = document.getElementById('listenerMessageInput');
    
    if (userMessageInput) {
        userMessageInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                e.preventDefault();
                sendUserMessage();
            }
        });
    }

    if (listenerMessageInput) {
        listenerMessageInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                e.preventDefault();
                sendListenerMessage();
            }
        });
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞
    document.querySelectorAll('.rating-star').forEach(star => {
        star.addEventListener('click', function() {
            selectedRating = parseInt(this.getAttribute('data-rating'));
            updateRatingStars(selectedRating);
        });
    });

    console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —á–∞—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
}

function sendUserMessage() {
    if (!activeChat) {
        showNotification('‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ª—É—à–∞—Ç–µ–ª—è!', 'error');
        return;
    }
    
    const input = document.getElementById('userMessageInput');
    const text = input.value.trim();
    
    if (!text) {
        showNotification('‚ùå –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!', 'error');
        return;
    }

    const message = {
        text: text,
        senderId: currentUser.id,
        timestamp: new Date(),
        id: Date.now().toString() // –í—Ä–µ–º–µ–Ω–Ω—ã–π ID
    };

    console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:', message);
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ä–∞–∑—É –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    addMessageToUserChat(message);
    
    if (socket && socket.connected) {
        socket.emit('send_message', {
            chatId: activeChat.id,
            message: message
        });
    }

    input.value = '';
}

function sendListenerMessage() {
    if (!activeChat) {
        showNotification('‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç –¥–ª—è –æ–±—â–µ–Ω–∏—è!', 'error');
        return;
    }
    
    const input = document.getElementById('listenerMessageInput');
    const text = input.value.trim();
    
    if (!text) {
        showNotification('‚ùå –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!', 'error');
        return;
    }

    const message = {
        text: text,
        senderId: currentUser.id,
        timestamp: new Date(),
        id: Date.now().toString() // –í—Ä–µ–º–µ–Ω–Ω—ã–π ID
    };

    console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Å–ª—É—à–∞—Ç–µ–ª—è:', message);
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ä–∞–∑—É –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    addMessageToListenerChat(message);
    
    if (socket && socket.connected) {
        socket.emit('send_message', {
            chatId: activeChat.id,
            message: message
        });
    }

    input.value = '';
}

function handleNewMessage(data) {
    console.log('üì® –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', data);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–æ –ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if (messageIds.has(data.message.id)) {
        console.log('‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º:', data.message.id);
        return;
    }
    
    messageIds.add(data.message.id);
    
    if (activeChat && activeChat.id === data.chatId) {
        if (!activeChat.messages) activeChat.messages = [];
        activeChat.messages.push(data.message);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
        updateMessageCount();
        
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —É –æ–±–æ–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞
        if (currentUser.role === 'user') {
            // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
            if (data.message.senderId !== currentUser.id) {
                addMessageToUserChat(data.message);
            }
        } else if (currentUser.role === 'listener') {
            // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å–ª—É—à–∞—Ç–µ–ª—è, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
            if (data.message.senderId !== currentUser.id) {
                addMessageToListenerChat(data.message);
            }
        }
    }
}

function addMessageToUserChat(message) {
    const container = document.getElementById('userMessagesContainer');
    if (!container) return;
    
    // –û—á–∏—â–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if (container.children.length === 1 && container.children[0].textContent.includes('–ß–∞—Ç –Ω–∞—á–∞—Ç')) {
        container.innerHTML = '';
    }
    
    const messageDiv = document.createElement('div');
    const isCurrentUser = message.senderId === currentUser.id;
    messageDiv.className = `message ${isCurrentUser ? 'user' : 'other'}`;
    messageDiv.innerHTML = `
        <div>${message.text}</div>
        <div class="message-time">${new Date(message.timestamp).toLocaleTimeString()}</div>
    `;
    container.appendChild(messageDiv);
    container.scrollTop = container.scrollHeight;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
    updateMessageCount();
}

function addMessageToListenerChat(message, scroll = true) {
    const container = document.getElementById('listenerMessagesContainer');
    if (!container) return;
    
    // –û—á–∏—â–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if (container.children.length === 1 && container.children[0].textContent.includes('–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç')) {
        container.innerHTML = '';
    }
    
    const messageDiv = document.createElement('div');
    const isCurrentUser = message.senderId === currentUser.id;
    messageDiv.className = `message ${isCurrentUser ? 'user' : 'other'}`;
    messageDiv.innerHTML = `
        <div>${message.text}</div>
        <div class="message-time">${new Date(message.timestamp).toLocaleTimeString()}</div>
    `;
    container.appendChild(messageDiv);
    
    if (scroll) {
        container.scrollTop = container.scrollHeight;
    }
}

function loadUserChatMessages() {
    const container = document.getElementById('userMessagesContainer');
    if (!container) return;
    
    container.innerHTML = '';
    
    if (!activeChat || !activeChat.messages || activeChat.messages.length === 0) {
        container.innerHTML = `
            <div style="text-align: center; color: #7f8c8d; margin-top: 50px;">
                <div>üí¨ –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π</div>
                <div style="font-size: 14px; margin-top: 10px;">–ù–∞—á–Ω–∏—Ç–µ –æ–±—â–µ–Ω–∏–µ —Å –≤–∞—à–∏–º —Å–ª—É—à–∞—Ç–µ–ª–µ–º</div>
            </div>
        `;
        return;
    }
    
    activeChat.messages.forEach(message => {
        addMessageToUserChat(message, false);
    });
    container.scrollTop = container.scrollHeight;
    
    updateMessageCount();
}

function loadListenerChatMessages() {
    const container = document.getElementById('listenerMessagesContainer');
    if (!container) return;
    
    container.innerHTML = '';
    
    if (!activeChat || !activeChat.messages || activeChat.messages.length === 0) {
        container.innerHTML = `
            <div style="text-align: center; color: #7f8c8d; margin-top: 50px;">
                <div>üí¨ –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π</div>
                <div style="font-size: 14px; margin-top: 10px;">–ù–∞—á–Ω–∏—Ç–µ –æ–±—â–µ–Ω–∏–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º</div>
            </div>
        `;
        return;
    }
    
    activeChat.messages.forEach(message => {
        addMessageToListenerChat(message, false);
    });
    container.scrollTop = container.scrollHeight;
}

function submitRating() {
    if (selectedRating === 0) {
        showNotification('‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ü–µ–Ω–∫—É!', 'error');
        return;
    }

    if (!currentListener) {
        showNotification('‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞!', 'error');
        return;
    }

    const reviewText = document.getElementById('reviewText').value.trim();
    
    console.log('‚≠ê –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ü–µ–Ω–∫–∏:', { rating: selectedRating, listenerId: currentListener.id });
    
    if (socket && socket.connected) {
        socket.emit('submit_rating', {
            listenerId: currentListener.id,
            rating: selectedRating,
            comment: reviewText,
            userId: currentUser.id
        });
    }

    showNotification('‚úÖ –û—Ü–µ–Ω–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!', 'success');

    selectedRating = 0;
    updateRatingStars(0);
    document.getElementById('reviewText').value = '';
    endChat();
}

function endChat() {
    console.log('üö™ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —á–∞—Ç–∞');
    if (activeChat && socket && socket.connected) {
        socket.emit('end_chat', { chatId: activeChat.id });
    }

    document.getElementById('userChatSection').classList.add('hidden');
    document.getElementById('listenersTab').classList.remove('hidden');
    clearInterval(chatTimer);
    activeChat = null;
    currentListener = null;
    chatStartTime = null;
}
