const express = require('express');
const http = require('http');
const socketIo = require('socket.io');
const path = require('path');
const cors = require('cors');
const PermanentStorage = require('./permanent_storage');

const app = express();
const server = http.createServer(app);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
const storage = new PermanentStorage();

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS –¥–ª—è Socket.IO
const io = socketIo(server, {
    cors: {
        origin: "*",
        methods: ["GET", "POST"],
        credentials: true
    },
    pingTimeout: 60000,
    pingInterval: 25000,
    transports: ['websocket', 'polling']
});

// Middleware
app.use(cors());
app.use(express.static(path.join(__dirname, 'public')));
app.use(express.json({ limit: '50mb' }));
app.use(express.urlencoded({ extended: true }));

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ socketId
function getUserBySocketId(socketId) {
    const users = storage.getUsers();
    return users.find(u => u.socketId === socketId);
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
function getUserById(userId) {
    const users = storage.getUsers();
    return users.find(u => u.id === userId);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function updateUser(userId, updates) {
    const users = storage.getUsers();
    const userIndex = users.findIndex(u => u.id === userId);
    if (userIndex !== -1) {
        users[userIndex] = { ...users[userIndex], ...updates };
        storage.saveUsers(users);
        return users[userIndex];
    }
    return null;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞
function resumeChat(chatId, userId) {
    const chats = storage.getChats();
    const chat = chats.find(c => c.id === chatId);
    
    if (!chat) return null;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–º–µ–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ—Å—Ç—É–ø –∫ —á–∞—Ç—É
    if (chat.user1 !== userId && chat.user2 !== userId) {
        return null;
    }
    
    // –ï—Å–ª–∏ —á–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω, –≤–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
    if (!chat.isActive) {
        chat.isActive = true;
        chat.lastActivity = new Date().toISOString();
        storage.saveChats(chats);
    }
    
    return chat;
}

// Socket.IO —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
io.on('connection', (socket) => {
    console.log(`üîó –ù–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: ${socket.id}`);

    // –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –°–ï–°–°–ò–ò
    socket.on('restore_session', (data) => {
        console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏:`, data);
        
        const user = getUserById(data.userId);
        
        if (user) {
            updateUser(user.id, {
                isOnline: true,
                socketId: socket.id,
                lastSeen: new Date().toISOString()
            });
            
            const currentUsers = storage.getUsers();
            const currentChats = storage.getChats();
            const currentRatings = storage.getRatings();
            const currentNotifications = storage.getNotifications();
            const settings = storage.getSettings();
            
            socket.emit('session_restored', { 
                success: true,
                user: user 
            });
            
            socket.emit('users_list', { 
                users: currentUsers.filter(u => u.id !== user.id) 
            });
            
            socket.emit('chats_list', { 
                chats: currentChats 
            });
            
            socket.emit('ratings_list', { 
                ratings: currentRatings 
            });

            socket.emit('notifications_list', {
                notifications: currentNotifications
            });

            socket.emit('settings_updated', {
                settings: settings
            });
            
            socket.broadcast.emit('user_connected', { user });
            console.log(`üîÑ –°–µ—Å—Å–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: ${user.username} (${user.role})`);
        } else {
            socket.emit('session_restored', { 
                success: false,
                error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
            });
        }
    });

    // –í–•–û–î
    socket.on('login', (data) => {
        console.log(`üö™ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—Ö–æ–¥:`, data);
        
        const users = storage.getUsers();
        const { username, password } = data;
        
        if (!username || !password) {
            socket.emit('login_error', '–õ–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã');
            return;
        }
        
        const user = users.find(u => u.username === username && u.password === password);
        if (!user) {
            socket.emit('login_error', '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å');
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        if (user.isBlocked && user.blockedUntil && new Date(user.blockedUntil) > new Date()) {
            socket.emit('login_error', '–ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–æ ' + new Date(user.blockedUntil).toLocaleDateString());
            return;
        }

        updateUser(user.id, {
            isOnline: true,
            socketId: socket.id,
            lastSeen: new Date().toISOString()
        });

        const currentUsers = storage.getUsers();
        const currentChats = storage.getChats();
        const currentRatings = storage.getRatings();
        const currentNotifications = storage.getNotifications();
        const settings = storage.getSettings();

        socket.emit('login_success', { user });
        
        socket.emit('users_list', { 
            users: currentUsers.filter(u => u.id !== user.id) 
        });
        
        socket.emit('chats_list', { 
            chats: currentChats 
        });
        
        socket.emit('ratings_list', { 
            ratings: currentRatings 
        });

        socket.emit('notifications_list', {
            notifications: currentNotifications
        });

        socket.emit('settings_updated', {
            settings: settings
        });
        
        socket.broadcast.emit('user_connected', { user });
        
        // –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥
        storage.addSystemLog('user_login', user.id, {
            username: user.username,
            role: user.role
        });
        
        console.log(`‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥: ${username} (${user.role})`);
    });

    // –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø
    socket.on('register', (data) => {
        console.log(`üìù –ó–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é:`, data);
        
        const users = storage.getUsers();
        const { username, password, role = 'user', displayName } = data;
        
        if (!username || !password) {
            socket.emit('registration_error', '–õ–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã');
            return;
        }

        const existingUser = users.find(u => u.username === username);
        if (existingUser) {
            socket.emit('registration_error', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
            return;
        }

        const newUser = {
            id: storage.generateId(),
            username,
            password,
            role: role || 'user',
            displayName: displayName || username,
            avatar: 'üë§',
            rating: 0,
            ratingCount: 0,
            isOnline: true,
            socketId: socket.id,
            createdAt: new Date().toISOString(),
            lastSeen: new Date().toISOString()
        };

        users.push(newUser);
        const saved = storage.saveUsers(users);
        
        if (saved) {
            socket.emit('registration_success', { user: newUser });
            
            const currentUsers = storage.getUsers();
            const currentChats = storage.getChats();
            const currentRatings = storage.getRatings();
            
            socket.emit('users_list', { 
                users: currentUsers.filter(u => u.id !== newUser.id) 
            });
            
            socket.emit('chats_list', { 
                chats: currentChats 
            });
            
            socket.emit('ratings_list', { 
                ratings: currentRatings 
            });
            
            socket.broadcast.emit('user_connected', { user: newUser });
            
            // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
            storage.addSystemLog('user_registration', newUser.id, {
                username: newUser.username,
                role: newUser.role
            });
            
            console.log(`‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${username}`);
        } else {
            socket.emit('registration_error', '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        }
    });

    // –í–û–ó–û–ë–ù–û–í–õ–ï–ù–ò–ï –ß–ê–¢–ê
    socket.on('resume_chat', (data) => {
        console.log(`üîÑ –í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞:`, data);
        
        const { chatId } = data;
        const user = getUserBySocketId(socket.id);
        
        if (!user) {
            socket.emit('chat_error', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        const chat = resumeChat(chatId, user.id);
        
        if (chat) {
            socket.emit('chat_resumed', { 
                chat: chat,
                success: true 
            });
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Ç–æ—Ä–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –µ—Å–ª–∏ –æ–Ω –æ–Ω–ª–∞–π–Ω
            const otherUserId = chat.user1 === user.id ? chat.user2 : chat.user1;
            const otherUser = getUserById(otherUserId);
            
            if (otherUser && otherUser.socketId) {
                const otherSocket = io.sockets.sockets.get(otherUser.socketId);
                if (otherSocket) {
                    otherSocket.emit('chat_resumed', { 
                        chat: chat,
                        success: true 
                    });
                }
            }
            
            console.log(`üîÑ –ß–∞—Ç –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω: ${chat.id}`);
        } else {
            socket.emit('chat_error', '–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞');
        }
    });

    // –û–¢–ü–†–ê–í–ö–ê –°–û–û–ë–©–ï–ù–ò–Ø –° –§–ê–ô–õ–ê–ú–ò –ò –°–¢–ò–ö–ï–†–ê–ú–ò
    socket.on('send_message', (data) => {
        console.log(`üì® –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:`, data);
        
        const chats = storage.getChats();
        const { chatId, message } = data;
        
        const chat = chats.find(c => c.id === chatId);
        if (!chat) {
            socket.emit('message_error', '–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        if (!chat.messages) chat.messages = [];
        
        const newMessage = {
            id: storage.generateId(),
            text: message.text,
            senderId: message.senderId,
            timestamp: new Date().toISOString(),
            type: message.type || 'text',
            fileData: message.fileData
        };

        chat.messages.push(newMessage);
        chat.lastActivity = new Date().toISOString();
        storage.saveChats(chats);

        const targetUserId = message.senderId === chat.user1 ? chat.user2 : chat.user1;
        const targetUser = getUserById(targetUserId);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é
        socket.emit('new_message', { chatId, message: newMessage });
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—é
        if (targetUser && targetUser.socketId) {
            const targetSocket = io.sockets.sockets.get(targetUser.socketId);
            if (targetSocket) {
                targetSocket.emit('new_message', { chatId, message: newMessage });
            }
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –¥–ª—è –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        io.emit('chats_list', { chats: storage.getChats() });
    });

    // –°–ù–Ø–¢–ò–ï –ë–õ–û–ö–ò–†–û–í–ö–ò/–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø
    socket.on('remove_moderation', (data) => {
        console.log(`üîì –°–Ω—è—Ç–∏–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏:`, data);
        
        const { userId, action } = data;
        const moderator = getUserBySocketId(socket.id);
        const user = getUserById(userId);
        
        if (!user) {
            socket.emit('moderation_error', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        if (!moderator || (moderator.role !== 'admin' && moderator.role !== 'owner')) {
            socket.emit('moderation_error', '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤');
            return;
        }

        const updates = {};
        const history = storage.getModerationHistory();
        
        const moderationRecord = {
            id: storage.generateId(),
            userId,
            moderatorId: moderator.id,
            action: `remove_${action}`,
            reason: '–°–Ω—è—Ç–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è',
            timestamp: new Date().toISOString()
        };

        switch (action) {
            case 'block':
                updates.isBlocked = false;
                updates.blockedUntil = null;
                moderationRecord.message = `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º ${moderator.displayName}`;
                break;
                
            case 'warning':
                updates.warnings = 0;
                moderationRecord.message = `–í—Å–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è —Å–Ω—è—Ç—ã –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º ${moderator.displayName}`;
                break;
                
            case 'vacation':
                updates.isOnVacation = false;
                updates.vacationUntil = null;
                moderationRecord.message = `–û—Ç–ø—É—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º ${moderator.displayName}`;
                break;
        }

        updateUser(userId, updates);
        history.push(moderationRecord);
        storage.saveModerationHistory(history);

        socket.emit('moderation_removed', {
            success: true,
            message: moderationRecord.message,
            user: getUserById(userId)
        });

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –æ–Ω –æ–Ω–ª–∞–π–Ω
        if (user.socketId) {
            const userSocket = io.sockets.sockets.get(user.socketId);
            if (userSocket) {
                userSocket.emit('moderation_removed', {
                    action: action,
                    moderator: moderator.displayName
                });
            }
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–∫–∏
        io.emit('users_list', { users: storage.getUsers() });
        io.emit('moderation_history', { history });
        
        // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        storage.addSystemLog('remove_moderation', moderator.id, {
            targetUser: user.username,
            action: action
        });
    });

    // –£–î–ê–õ–ï–ù–ò–ï –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞)
    socket.on('remove_admin', (data) => {
        console.log(`üëë –£–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:`, data);
        
        const { adminId } = data;
        const owner = getUserBySocketId(socket.id);
        const admin = getUserById(adminId);
        
        if (!owner || owner.role !== 'owner') {
            socket.emit('admin_remove_error', '–¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤');
            return;
        }

        if (!admin) {
            socket.emit('admin_remove_error', '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        if (admin.isPermanent) {
            socket.emit('admin_remove_error', '–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
            return;
        }

        // –ü–æ–Ω–∏–∂–∞–µ–º –¥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const updatedAdmin = updateUser(adminId, { 
            role: 'user',
            avatar: 'üë§'
        });
        
        if (updatedAdmin) {
            socket.emit('admin_removed', { 
                userId: adminId,
                user: updatedAdmin 
            });
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –æ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–æ–ª–∏
            io.emit('user_updated', { user: updatedAdmin });
            io.emit('users_list', { users: storage.getUsers().filter(u => u.id !== owner.id) });
            
            // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
            storage.addSystemLog('remove_admin', owner.id, {
                removedAdmin: admin.username
            });
            
            console.log(`üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–Ω–∏–∂–µ–Ω: ${admin.username}`);
        } else {
            socket.emit('admin_remove_error', '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
        }
    });

    // –û–ë–ù–û–í–õ–ï–ù–ò–ï –ù–ê–°–¢–†–û–ï–ö –°–ò–°–¢–ï–ú–´
    socket.on('update_settings', (data) => {
        console.log(`‚öôÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫:`, data);
        
        const { settings } = data;
        const user = getUserBySocketId(socket.id);
        
        if (!user || (user.role !== 'admin' && user.role !== 'owner')) {
            socket.emit('settings_error', '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤');
            return;
        }

        const currentSettings = storage.getSettings();
        const updatedSettings = { ...currentSettings, ...settings };
        
        if (storage.saveSettings(updatedSettings)) {
            socket.emit('settings_updated', { settings: updatedSettings });
            socket.broadcast.emit('settings_updated', { settings: updatedSettings });
            
            // –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            storage.addSystemLog('update_settings', user.id, {
                changes: Object.keys(settings)
            });
            
            console.log('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
        } else {
            socket.emit('settings_error', '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫');
        }
    });

    // –°–û–ó–î–ê–ù–ò–ï –†–ï–ó–ï–†–í–ù–û–ô –ö–û–ü–ò–ò
    socket.on('create_backup', () => {
        const user = getUserBySocketId(socket.id);
        
        if (!user || user.role !== 'owner') {
            socket.emit('backup_error', '–¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏');
            return;
        }

        try {
            const backupFile = storage.createBackup();
            socket.emit('backup_created', { 
                success: true,
                file: backupFile,
                timestamp: new Date().toISOString()
            });
            
            console.log(`üíæ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: ${backupFile}`);
        } catch (error) {
            socket.emit('backup_error', '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏');
        }
    });

    // –ü–û–õ–£–ß–ï–ù–ò–ï –°–ò–°–¢–ï–ú–ù–´–• –õ–û–ì–û–í
    socket.on('get_system_logs', () => {
        const user = getUserBySocketId(socket.id);
        
        if (!user || user.role !== 'owner') {
            socket.emit('logs_error', '–¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –ª–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã');
            return;
        }

        const logs = storage.getSystemLogs();
        socket.emit('system_logs', { logs });
    });

    // –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (create_chat, end_chat, submit_rating, apply_moderation_action –∏ —Ç.–¥.)
    // –æ—Å—Ç–∞—é—Ç—Å—è –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–º–∏, –Ω–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç storage –≤–º–µ—Å—Ç–æ —Å—Ç–∞—Ä—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π

    // –û–¢–ö–õ–Æ–ß–ï–ù–ò–ï
    socket.on('disconnect', (reason) => {
        console.log(`üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ: ${socket.id} - ${reason}`);
        
        const user = getUserBySocketId(socket.id);
        if (user) {
            updateUser(user.id, {
                isOnline: false,
                socketId: null,
                lastSeen: new Date().toISOString()
            });
            
            socket.broadcast.emit('user_disconnected', { userId: user.id });
        }
    });
});

// API –º–∞—Ä—à—Ä—É—Ç—ã
app.get('/api/users', (req, res) => {
    const users = storage.getUsers();
    res.json(users);
});

app.get('/api/chats', (req, res) => {
    const chats = storage.getChats();
    res.json(chats);
});

app.get('/api/ratings', (req, res) => {
    const ratings = storage.getRatings();
    res.json(ratings);
});

app.get('/api/notifications', (req, res) => {
    const notifications = storage.getNotifications();
    res.json(notifications);
});

app.get('/api/stats', (req, res) => {
    const users = storage.getUsers();
    const chats = storage.getChats();
    
    const stats = {
        totalUsers: users.length,
        totalListeners: users.filter(u => u.role === 'listener').length,
        totalAdmins: users.filter(u => u.role === 'admin').length,
        activeChats: chats.filter(c => c.isActive).length,
        onlineUsers: users.filter(u => u.isOnline).length,
        totalMessages: chats.reduce((total, chat) => total + (chat.messages?.length || 0), 0),
        systemUptime: process.uptime()
    };
    res.json(stats);
});

app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

app.get('/health', (req, res) => {
    res.json({ 
        status: 'OK', 
        timestamp: new Date().toISOString(),
        storage: 'permanent',
        dataSize: {
            users: storage.getUsers().length,
            chats: storage.getChats().length,
            ratings: storage.getRatings().length
        }
    });
});

const PORT = process.env.PORT || 3000;
server.listen(PORT, '0.0.0.0', () => {
    const users = storage.getUsers();
    console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log(`üíæ –ü–æ—Å—Ç–æ—è–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ`);
    console.log(`üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}`);
    console.log(`üîê –ê–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è –≤—Ö–æ–¥–∞:`);
    console.log(`   üëë –í–ª–∞–¥–µ–ª–µ—Ü: owner / owner2024`);
    console.log(`   ‚öôÔ∏è –ê–¥–º–∏–Ω: admin / admin123`);
    console.log(`   üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: user / 123456`);
    console.log(`   üéß –°–ª—É—à–∞—Ç–µ–ª—å: listener / 123456`);
    console.log(`üåê URL: http://localhost:${PORT}`);
});
