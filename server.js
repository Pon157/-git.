const express = require('express');
const http = require('http');
const socketIo = require('socket.io');
const path = require('path');
const fs = require('fs');
const cors = require('cors');
const multer = require('multer');
const { v4: uuidv4 } = require('uuid');

const app = express();
const server = http.createServer(app);

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS –¥–ª—è Socket.IO
const io = socketIo(server, {
    cors: {
        origin: "*",
        methods: ["GET", "POST"],
        credentials: true
    },
    pingTimeout: 60000,
    pingInterval: 25000,
    transports: ['websocket', 'polling']
});

// Middleware
app.use(cors());
app.use(express.static(path.join(__dirname, 'public')));
app.use('/uploads', express.static(path.join(__dirname, 'uploads')));
app.use(express.json({ limit: '50mb' }));
app.use(express.urlencoded({ extended: true, limit: '50mb' }));

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ multer –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
const storage = multer.diskStorage({
    destination: function (req, file, cb) {
        const uploadDir = path.join(__dirname, 'uploads');
        if (!fs.existsSync(uploadDir)) {
            fs.mkdirSync(uploadDir, { recursive: true });
        }
        cb(null, uploadDir);
    },
    filename: function (req, file, cb) {
        const uniqueName = uuidv4() + path.extname(file.originalname);
        cb(null, uniqueName);
    }
});

const upload = multer({
    storage: storage,
    limits: {
        fileSize: 10 * 1024 * 1024 // 10MB limit
    },
    fileFilter: function (req, file, cb) {
        // –†–∞–∑—Ä–µ—à–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, GIF, –∏ –¥—Ä—É–≥–∏–µ –º–µ–¥–∏–∞ —Ñ–∞–π–ª—ã
        if (file.mimetype.startsWith('image/') || 
            file.mimetype.startsWith('video/') ||
            file.mimetype === 'application/json' || // –¥–ª—è —Å—Ç–∏–∫–µ—Ä–æ–≤
            file.mimetype.startsWith('audio/')) {
            cb(null, true);
        } else {
            cb(new Error('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞!'), false);
        }
    }
});

// –§–∞–π–ª—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
const DATA_DIR = './data';
const USERS_FILE = path.join(DATA_DIR, 'users.json');
const CHATS_FILE = path.join(DATA_DIR, 'chats.json');
const RATINGS_FILE = path.join(DATA_DIR, 'ratings.json');
const NOTIFICATIONS_FILE = path.join(DATA_DIR, 'notifications.json');
const MODERATION_FILE = path.join(DATA_DIR, 'moderation.json');

// –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
function ensureDirectories() {
    const directories = [DATA_DIR, './uploads'];
    
    directories.forEach(dir => {
        if (!fs.existsSync(dir)) {
            fs.mkdirSync(dir, { recursive: true });
            console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${dir}`);
        }
    });
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
function initializeFiles() {
    ensureDirectories();
    
    const files = [
        { name: USERS_FILE, default: [] },
        { name: CHATS_FILE, default: [] },
        { name: RATINGS_FILE, default: [] },
        { name: NOTIFICATIONS_FILE, default: [] },
        { name: MODERATION_FILE, default: [] }
    ];

    files.forEach(file => {
        if (!fs.existsSync(file.name)) {
            fs.writeFileSync(file.name, JSON.stringify(file.default, null, 2));
            console.log(`‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: ${file.name}`);
        }
    });
}

// –£–ª—É—á—à–µ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
function loadData(filename, defaultValue = []) {
    try {
        if (fs.existsSync(filename)) {
            const data = fs.readFileSync(filename, 'utf8');
            if (data.trim() === '') {
                console.log(`‚ö†Ô∏è –§–∞–π–ª ${filename} –ø—É—Å—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é`);
                return defaultValue;
            }
            const parsed = JSON.parse(data);
            console.log(`üìÅ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${parsed.length} –∑–∞–ø–∏—Å–µ–π –∏–∑ ${filename}`);
            return parsed;
        }
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ${filename}:`, error);
        // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        if (fs.existsSync(filename)) {
            const backupName = filename + '.backup-' + Date.now();
            fs.copyFileSync(filename, backupName);
            console.log(`üíæ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: ${backupName}`);
        }
    }
    return defaultValue;
}

// –£–ª—É—á—à–µ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
function saveData(filename, data) {
    try {
        // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∞—Ç–æ–º–∞—Ä–Ω–æ–π –∑–∞–ø–∏—Å–∏
        const tempFile = filename + '.tmp';
        fs.writeFileSync(tempFile, JSON.stringify(data, null, 2));
        
        // –ó–∞–º–µ–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
        fs.renameSync(tempFile, filename);
        
        console.log(`üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ ${filename} (${data.length} –∑–∞–ø–∏—Å–µ–π)`);
        return true;
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è ${filename}:`, error);
        return false;
    }
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
function startAutoSave() {
    setInterval(() => {
        console.log('üîÑ –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...');
        // –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏, —ç—Ç–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞
    }, 30000);
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
function getUsers() {
    return loadData(USERS_FILE, []);
}

function getChats() {
    return loadData(CHATS_FILE, []);
}

function getRatings() {
    return loadData(RATINGS_FILE, []);
}

function getNotifications() {
    return loadData(NOTIFICATIONS_FILE, []);
}

function getModerationHistory() {
    return loadData(MODERATION_FILE, []);
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
function saveUsers(users) {
    return saveData(USERS_FILE, users);
}

function saveChats(chats) {
    return saveData(CHATS_FILE, chats);
}

function saveRatings(ratings) {
    return saveData(RATINGS_FILE, ratings);
}

function saveNotifications(notifications) {
    return saveData(NOTIFICATIONS_FILE, notifications);
}

function saveModerationHistory(history) {
    return saveData(MODERATION_FILE, history);
}

// –°–æ–∑–¥–∞–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∏ –¥–µ–º–æ-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
function initializeUsers() {
    let users = getUsers();
    
    const defaultUsers = [
        {
            id: 'user-1',
            username: 'owner',
            password: 'owner2024',
            role: 'owner',
            displayName: '–í–ª–∞–¥–µ–ª–µ—Ü –°–∏—Å—Ç–µ–º—ã',
            avatar: 'üëë',
            rating: 5.0,
            ratingCount: 0,
            isOnline: false,
            socketId: null,
            createdAt: new Date().toISOString(),
            isSuperAdmin: true,
            isBlocked: false,
            isOnVacation: false,
            warnings: 0
        },
        {
            id: 'user-2',
            username: 'admin',
            password: 'admin123',
            role: 'admin',
            displayName: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
            avatar: '‚öôÔ∏è',
            rating: 5.0,
            ratingCount: 0,
            isOnline: false,
            socketId: null,
            createdAt: new Date().toISOString(),
            isBlocked: false,
            isOnVacation: false,
            warnings: 0
        },
        {
            id: 'user-3',
            username: 'user',
            password: '123456',
            role: 'user',
            displayName: '–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
            avatar: 'üë§',
            rating: 0,
            ratingCount: 0,
            isOnline: false,
            socketId: null,
            createdAt: new Date().toISOString(),
            isBlocked: false,
            isOnVacation: false,
            warnings: 0
        },
        {
            id: 'user-4', 
            username: 'listener',
            password: '123456',
            role: 'listener',
            displayName: '–ê–Ω–Ω–∞ –°–ª—É—à–∞—Ç–µ–ª—å',
            avatar: 'üéß',
            rating: 4.8,
            ratingCount: 15,
            isOnline: false,
            socketId: null,
            createdAt: new Date().toISOString(),
            isBlocked: false,
            isOnVacation: false,
            warnings: 0
        }
    ];

    let hasChanges = false;
    
    defaultUsers.forEach(defaultUser => {
        const exists = users.find(u => u.username === defaultUser.username);
        if (!exists) {
            users.push(defaultUser);
            hasChanges = true;
            console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${defaultUser.username} (${defaultUser.role})`);
        }
    });

    if (hasChanges) {
        saveUsers(users);
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
console.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã...');
initializeFiles();
initializeUsers();
startAutoSave();

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID
function generateId() {
    return Date.now().toString() + Math.random().toString(36).substr(2, 9);
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ socketId
function getUserBySocketId(socketId) {
    const users = getUsers();
    return users.find(u => u.socketId === socketId);
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
function getUserById(userId) {
    const users = getUsers();
    return users.find(u => u.id === userId);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function updateUser(userId, updates) {
    const users = getUsers();
    const userIndex = users.findIndex(u => u.id === userId);
    if (userIndex !== -1) {
        users[userIndex] = { ...users[userIndex], ...updates };
        const saved = saveUsers(users);
        if (saved) {
            return users[userIndex];
        }
    }
    return null;
}

// API –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
app.post('/api/upload', upload.single('file'), (req, res) => {
    try {
        if (!req.file) {
            return res.status(400).json({ error: '–§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω' });
        }

        const fileInfo = {
            id: generateId(),
            originalName: req.file.originalname,
            filename: req.file.filename,
            path: `/uploads/${req.file.filename}`,
            mimetype: req.file.mimetype,
            size: req.file.size,
            uploadedAt: new Date().toISOString(),
            uploadedBy: req.body.userId || 'unknown'
        };

        console.log('üìÅ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω:', fileInfo);
        res.json({ success: true, file: fileInfo });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞' });
    }
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
app.get('/api/files/:filename', (req, res) => {
    const filename = req.params.filename;
    const filePath = path.join(__dirname, 'uploads', filename);
    
    if (fs.existsSync(filePath)) {
        res.sendFile(filePath);
    } else {
        res.status(404).json({ error: '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
});

// Socket.IO —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
io.on('connection', (socket) => {
    console.log(`üîó –ù–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: ${socket.id}`);

    // –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –°–ï–°–°–ò–ò
    socket.on('restore_session', (data) => {
        console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏:`, data);
        
        const user = getUserById(data.userId);
        
        if (user) {
            updateUser(user.id, {
                isOnline: true,
                socketId: socket.id
            });
            
            const currentUsers = getUsers();
            const currentChats = getChats();
            const currentRatings = getRatings();
            const currentNotifications = getNotifications();
            const currentModerationHistory = getModerationHistory();
            
            socket.emit('session_restored', { 
                success: true,
                user: user 
            });
            
            socket.emit('users_list', { 
                users: currentUsers.filter(u => u.id !== user.id) 
            });
            
            if (user.role === 'admin' || user.role === 'owner') {
                socket.emit('chats_list', { 
                    chats: currentChats 
                });
            } else {
                socket.emit('chats_list', { 
                    chats: currentChats.filter(chat => 
                        chat.user1 === user.id || chat.user2 === user.id
                    )
                });
            }
            
            socket.emit('ratings_list', { 
                ratings: currentRatings 
            });

            socket.emit('notifications_list', {
                notifications: currentNotifications
            });

            socket.emit('moderation_history', {
                history: currentModerationHistory
            });
            
            socket.broadcast.emit('user_connected', { user });
            console.log(`üîÑ –°–µ—Å—Å–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: ${user.username} (${user.role})`);
        } else {
            socket.emit('session_restored', { 
                success: false,
                error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
            });
        }
    });

    // –í–•–û–î
    socket.on('login', (data) => {
        console.log(`üö™ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—Ö–æ–¥:`, data);
        
        const users = getUsers();
        const { username, password } = data;
        
        if (!username || !password) {
            socket.emit('login_error', '–õ–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã');
            return;
        }
        
        const user = users.find(u => u.username === username && u.password === password);
        if (!user) {
            socket.emit('login_error', '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å');
            return;
        }

        if (user.isBlocked) {
            socket.emit('login_error', '–ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω');
            return;
        }

        updateUser(user.id, {
            isOnline: true,
            socketId: socket.id
        });

        const currentUsers = getUsers();
        const currentChats = getChats();
        const currentRatings = getRatings();
        const currentNotifications = getNotifications();
        const currentModerationHistory = getModerationHistory();

        socket.emit('login_success', { user });
        
        socket.emit('users_list', { 
            users: currentUsers.filter(u => u.id !== user.id) 
        });
        
        if (user.role === 'admin' || user.role === 'owner') {
            socket.emit('chats_list', { 
                chats: currentChats 
            });
        } else {
            socket.emit('chats_list', { 
                chats: currentChats.filter(chat => 
                    chat.user1 === user.id || chat.user2 === user.id
                )
            });
        }
        
        socket.emit('ratings_list', { 
            ratings: currentRatings 
        });

        socket.emit('notifications_list', {
            notifications: currentNotifications
        });

        socket.emit('moderation_history', {
            history: currentModerationHistory
        });
        
        socket.broadcast.emit('user_connected', { user });
        console.log(`‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥: ${username} (${user.role})`);
    });

    // –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø
    socket.on('register', (data) => {
        console.log(`üìù –ó–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é:`, data);
        
        const users = getUsers();
        const { username, password, role = 'user', displayName } = data;
        
        if (!username || !password) {
            socket.emit('registration_error', '–õ–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã');
            return;
        }

        if (username.length < 3) {
            socket.emit('registration_error', '–õ–æ–≥–∏–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 3 —Å–∏–º–≤–æ–ª–æ–≤');
            return;
        }

        if (password.length < 6) {
            socket.emit('registration_error', '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 6 —Å–∏–º–≤–æ–ª–æ–≤');
            return;
        }

        const existingUser = users.find(u => u.username === username);
        if (existingUser) {
            socket.emit('registration_error', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
            return;
        }

        const newUser = {
            id: generateId(),
            username,
            password,
            role: role || 'user',
            displayName: displayName || username,
            avatar: 'üë§',
            rating: 0,
            ratingCount: 0,
            isOnline: true,
            socketId: socket.id,
            createdAt: new Date().toISOString(),
            isBlocked: false,
            isOnVacation: false,
            warnings: 0
        };

        users.push(newUser);
        const saved = saveUsers(users);
        
        if (saved) {
            socket.emit('registration_success', { user: newUser });
            
            const currentUsers = getUsers();
            const currentChats = getChats();
            const currentRatings = getRatings();
            
            socket.emit('users_list', { 
                users: currentUsers.filter(u => u.id !== newUser.id) 
            });
            
            socket.emit('chats_list', { 
                chats: currentChats 
            });
            
            socket.emit('ratings_list', { 
                ratings: currentRatings 
            });
            
            socket.broadcast.emit('user_connected', { user: newUser });
            console.log(`‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${username}`);
        } else {
            socket.emit('registration_error', '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        }
    });

    // –û–ë–ù–û–í–õ–ï–ù–ò–ï –ü–†–û–§–ò–õ–Ø
    socket.on('update_profile', (data) => {
        console.log(`üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è:`, data);
        
        const { userId, displayName, avatar, password } = data;
        const user = getUserById(userId);
        
        if (!user) {
            socket.emit('profile_update_error', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        const updates = {};
        if (displayName) updates.displayName = displayName;
        if (avatar) updates.avatar = avatar;
        if (password) {
            if (password.length < 6) {
                socket.emit('profile_update_error', '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 6 —Å–∏–º–≤–æ–ª–æ–≤');
                return;
            }
            updates.password = password;
        }

        const updatedUser = updateUser(userId, updates);
        
        if (updatedUser) {
            socket.emit('profile_updated', { user: updatedUser });
            socket.broadcast.emit('user_updated', { user: updatedUser });
        } else {
            socket.emit('profile_update_error', '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è');
        }
    });

    // –î–û–ë–ê–í–õ–ï–ù–ò–ï –°–û–¢–†–£–î–ù–ò–ö–ê
    socket.on('register_staff', (data) => {
        console.log(`‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:`, data);
        
        const users = getUsers();
        const { username, password, displayName, role } = data;

        if (username.length < 3) {
            socket.emit('staff_add_error', '–õ–æ–≥–∏–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 3 —Å–∏–º–≤–æ–ª–æ–≤');
            return;
        }

        if (password.length < 6) {
            socket.emit('staff_add_error', '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 6 —Å–∏–º–≤–æ–ª–æ–≤');
            return;
        }

        const existingUser = users.find(u => u.username === username);
        if (existingUser) {
            socket.emit('staff_add_error', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
            return;
        }

        const newStaff = {
            id: generateId(),
            username,
            password,
            role: role || 'listener',
            displayName: displayName || username,
            avatar: role === 'admin' ? '‚öôÔ∏è' : 'üéß',
            rating: 0,
            ratingCount: 0,
            isOnline: false,
            socketId: null,
            createdAt: new Date().toISOString(),
            isBlocked: false,
            isOnVacation: false,
            warnings: 0
        };

        users.push(newStaff);
        const saved = saveUsers(users);
        
        if (saved) {
            socket.emit('staff_added', { user: newStaff });
            socket.broadcast.emit('user_connected', { user: newStaff });
        } else {
            socket.emit('staff_add_error', '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞');
        }
    });

    // –ò–ó–ú–ï–ù–ï–ù–ò–ï –†–û–õ–ò
    socket.on('change_role', (data) => {
        console.log(`üé≠ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–æ–ª–∏:`, data);
        
        const { userId, newRole } = data;
        const user = getUserById(userId);
        
        if (!user) {
            socket.emit('role_change_error', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        const updatedUser = updateUser(userId, { 
            role: newRole,
            avatar: newRole === 'admin' ? '‚öôÔ∏è' : newRole === 'listener' ? 'üéß' : 'üë§'
        });
        
        if (updatedUser) {
            socket.emit('role_changed', { userId, newRole, user: updatedUser });
            socket.broadcast.emit('user_updated', { user: updatedUser });
        } else {
            socket.emit('role_change_error', '–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–æ–ª–∏');
        }
    });

    // –ü–†–ò–ú–ï–ù–ï–ù–ò–ï –î–ï–ô–°–¢–í–ò–ô –ú–û–î–ï–†–ê–¶–ò–ò
    socket.on('apply_moderation_action', (data) => {
        console.log(`‚öñÔ∏è –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏:`, data);
        
        const { userId, action, reason, moderatorId, duration } = data;
        const user = getUserById(userId);
        const moderator = getUserById(moderatorId);
        
        if (!user) {
            socket.emit('moderation_error', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        const updates = {};
        let message = '';
        
        switch (action) {
            case 'warning':
                updates.warnings = (user.warnings || 0) + 1;
                message = `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.displayName || user.username} –≤—ã–¥–∞–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ`;
                break;
                
            case 'block':
                updates.isBlocked = true;
                updates.blockedUntil = new Date(Date.now() + (duration || 7) * 24 * 60 * 60 * 1000).toISOString();
                message = `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.displayName || user.username} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞ ${duration || 7} –¥–Ω–µ–π`;
                break;
                
            case 'vacation':
                updates.isOnVacation = true;
                updates.vacationUntil = new Date(Date.now() + (duration || 7) * 24 * 60 * 60 * 1000).toISOString();
                message = `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.displayName || user.username} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –æ—Ç–ø—É—Å–∫ –Ω–∞ ${duration || 7} –¥–Ω–µ–π`;
                break;
                
            default:
                socket.emit('moderation_error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏');
                return;
        }

        const updatedUser = updateUser(userId, updates);
        
        if (updatedUser) {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –º–æ–¥–µ—Ä–∞—Ü–∏–∏
            const moderationHistory = getModerationHistory();
            const moderationRecord = {
                id: generateId(),
                userId,
                moderatorId,
                action,
                reason,
                duration: duration || null,
                timestamp: new Date().toISOString()
            };
            
            moderationHistory.push(moderationRecord);
            saveModerationHistory(moderationHistory);

            socket.emit('moderation_action_applied', { 
                message,
                user: updatedUser 
            });
            
            socket.broadcast.emit('user_updated', { user: updatedUser });
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –æ–Ω –æ–Ω–ª–∞–π–Ω
            if (user.socketId) {
                const userSocket = io.sockets.sockets.get(user.socketId);
                if (userSocket) {
                    userSocket.emit('moderation_action_received', {
                        action,
                        reason,
                        duration,
                        moderator: moderator ? moderator.displayName : '–°–∏—Å—Ç–µ–º–∞'
                    });
                }
            }
        } else {
            socket.emit('moderation_error', '–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏');
        }
    });

    // –û–¢–ü–†–ê–í–ö–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø
    socket.on('send_technical_notification', (data) => {
        console.log(`üì¢ –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:`, data);
        
        const notifications = getNotifications();
        const { title, text, type, recipients } = data;
        
        const newNotification = {
            id: generateId(),
            title,
            text,
            type,
            recipients,
            timestamp: new Date().toISOString(),
            readBy: []
        };

        notifications.push(newNotification);
        saveNotifications(notifications);

        const users = getUsers();
        let targetUsers = [];

        switch (recipients) {
            case 'all':
                targetUsers = users;
                break;
            case 'users':
                targetUsers = users.filter(u => u.role === 'user');
                break;
            case 'listeners':
                targetUsers = users.filter(u => u.role === 'listener');
                break;
            case 'admins':
                targetUsers = users.filter(u => u.role === 'admin' || u.role === 'owner');
                break;
        }

        targetUsers.forEach(user => {
            if (user.socketId) {
                const userSocket = io.sockets.sockets.get(user.socketId);
                if (userSocket) {
                    userSocket.emit('new_notification', { notification: newNotification });
                }
            }
        });

        socket.emit('notification_sent', { success: true });
    });

    // –ü–û–õ–£–ß–ï–ù–ò–ï –î–ê–ù–ù–´–•
    socket.on('get_users', () => {
        const users = getUsers();
        socket.emit('users_list', { users });
    });

    socket.on('get_chats', () => {
        const user = getUserBySocketId(socket.id);
        const chats = getChats();
        
        if (user && (user.role === 'admin' || user.role === 'owner')) {
            socket.emit('chats_list', { chats });
        } else if (user) {
            const userChats = chats.filter(chat => 
                chat.user1 === user.id || chat.user2 === user.id
            );
            socket.emit('chats_list', { chats: userChats });
        } else {
            socket.emit('chats_list', { chats: [] });
        }
    });

    socket.on('get_ratings', () => {
        const ratings = getRatings();
        socket.emit('ratings_list', { ratings });
    });

    socket.on('get_notifications', () => {
        const notifications = getNotifications();
        socket.emit('notifications_list', { notifications });
    });

    socket.on('get_moderation_history', () => {
        const history = getModerationHistory();
        socket.emit('moderation_history', { history });
    });

    // –°–û–ó–î–ê–ù–ò–ï –ß–ê–¢–ê
    socket.on('create_chat', (data) => {
        console.log(`üí¨ –°–æ–∑–¥–∞–Ω–∏–µ —á–∞—Ç–∞:`, data);
        
        const users = getUsers();
        const chats = getChats();
        const { user1, user2 } = data;
        
        const user1Data = getUserById(user1);
        const user2Data = getUserById(user2);
        
        if (!user1Data || !user2Data) {
            socket.emit('chat_error', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        if (user1Data.isBlocked || user2Data.isBlocked) {
            socket.emit('chat_error', '–ù–µ–ª—å–∑—è —Å–æ–∑–¥–∞—Ç—å —á–∞—Ç —Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç
        const existingChat = chats.find(chat => 
            chat.isActive && 
            ((chat.user1 === user1 && chat.user2 === user2) || 
             (chat.user1 === user2 && chat.user2 === user1))
        );

        if (existingChat) {
            console.log('üí¨ –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç:', existingChat.id);
            socket.emit('chat_exists', { chat: existingChat });
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–æ–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            if (user1Data.socketId) {
                const user1Socket = io.sockets.sockets.get(user1Data.socketId);
                if (user1Socket) {
                    user1Socket.emit('chat_created', { 
                        chat: existingChat, 
                        listenerName: user2Data.displayName 
                    });
                }
            }
            
            if (user2Data.socketId) {
                const user2Socket = io.sockets.sockets.get(user2Data.socketId);
                if (user2Socket) {
                    user2Socket.emit('chat_created', { 
                        chat: existingChat, 
                        listenerName: user1Data.displayName 
                    });
                }
            }
            return;
        }

        const newChat = {
            id: generateId(),
            user1,
            user2, 
            messages: [],
            startTime: new Date().toISOString(),
            isActive: true,
            lastActivity: new Date().toISOString()
        };

        chats.push(newChat);
        saveChats(chats);

        console.log('üí¨ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —á–∞—Ç:', newChat.id);

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–±–æ–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        socket.emit('chat_created', { 
            chat: newChat, 
            listenerName: user2Data.displayName 
        });
        
        if (user2Data.socketId) {
            const listenerSocket = io.sockets.sockets.get(user2Data.socketId);
            if (listenerSocket) {
                listenerSocket.emit('chat_created', { 
                    chat: newChat, 
                    listenerName: user1Data.displayName 
                });
            }
        }
    });

    // –û–¢–ü–†–ê–í–ö–ê –°–û–û–ë–©–ï–ù–ò–Ø
    socket.on('send_message', (data) => {
        console.log(`üì® –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:`, data);
        
        const chats = getChats();
        const { chatId, message } = data;
        
        const chat = chats.find(c => c.id === chatId);
        if (!chat) {
            socket.emit('message_error', '–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        if (!chat.isActive) {
            socket.emit('message_error', '–ß–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
            return;
        }

        if (!chat.messages) chat.messages = [];
        
        const newMessage = {
            id: generateId(),
            text: message.text,
            senderId: message.senderId,
            timestamp: new Date().toISOString(),
            type: message.type || 'text',
            file: message.file || null,
            sticker: message.sticker || null
        };

        chat.messages.push(newMessage);
        chat.lastActivity = new Date().toISOString();
        saveChats(chats);

        // –ù–∞—Ö–æ–¥–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞
        const user1 = getUserById(chat.user1);
        const user2 = getUserById(chat.user2);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é (–¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è)
        socket.emit('new_message', { chatId, message: newMessage });
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥—Ä—É–≥–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É —á–∞—Ç–∞
        const targetUserId = message.senderId === chat.user1 ? chat.user2 : chat.user1;
        const targetUser = getUserById(targetUserId);
        
        if (targetUser && targetUser.socketId) {
            const targetSocket = io.sockets.sockets.get(targetUser.socketId);
            if (targetSocket) {
                targetSocket.emit('new_message', { chatId, message: newMessage });
            }
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –¥–ª—è –æ–±–æ–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if (user1 && user1.socketId) {
            const user1Socket = io.sockets.sockets.get(user1.socketId);
            if (user1Socket) {
                user1Socket.emit('chats_updated');
            }
        }
        
        if (user2 && user2.socketId) {
            const user2Socket = io.sockets.sockets.get(user2.socketId);
            if (user2Socket) {
                user2Socket.emit('chats_updated');
            }
        }
    });

    // –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–ü–ò–°–ö–ê –ß–ê–¢–û–í
    socket.on('chats_updated', () => {
        const user = getUserBySocketId(socket.id);
        const chats = getChats();
        
        if (user && (user.role === 'admin' || user.role === 'owner')) {
            socket.emit('chats_list', { chats });
        } else if (user) {
            const userChats = chats.filter(chat => 
                chat.user1 === user.id || chat.user2 === user.id
            );
            socket.emit('chats_list', { chats: userChats });
        }
    });

    // –û–¶–ï–ù–ö–ê
    socket.on('submit_rating', (data) => {
        console.log(`‚≠ê –û—Ü–µ–Ω–∫–∞:`, data);
        
        const ratings = getRatings();
        const { listenerId, rating, comment, userId } = data;
        
        const newRating = {
            id: generateId(),
            listenerId,
            userId,
            rating,
            comment,
            timestamp: new Date().toISOString()
        };

        ratings.push(newRating);
        saveRatings(ratings);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥ —Å–ª—É—à–∞—Ç–µ–ª—è
        const listenerRatings = ratings.filter(r => r.listenerId === listenerId);
        const totalRating = listenerRatings.reduce((sum, r) => sum + r.rating, 0);
        const avgRating = listenerRatings.length > 0 ? totalRating / listenerRatings.length : 0;

        const listener = getUserById(listenerId);
        if (listener) {
            updateUser(listenerId, {
                rating: avgRating,
                ratingCount: listenerRatings.length
            });
        }

        socket.emit('rating_submitted', {
            listenerId,
            newRating: avgRating,
            ratingCount: listenerRatings.length
        });

        if (listener && listener.socketId) {
            const listenerSocket = io.sockets.sockets.get(listener.socketId);
            if (listenerSocket) {
                listenerSocket.emit('rating_received', {
                    listenerId,
                    newRating: avgRating, 
                    ratingCount: listenerRatings.length,
                    rating,
                    comment
                });
            }
        }
    });

    // –ó–ê–í–ï–†–®–ï–ù–ò–ï –ß–ê–¢–ê
    socket.on('end_chat', (data) => {
        console.log(`üîö –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —á–∞—Ç–∞:`, data);
        
        const chats = getChats();
        const { chatId } = data;
        
        const chat = chats.find(c => c.id === chatId);
        if (!chat) {
            socket.emit('chat_error', '–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        chat.isActive = false;
        chat.endTime = new Date().toISOString();
        saveChats(chats);

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–±–æ–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞
        socket.emit('chat_ended', { chatId });
        
        const user2 = getUserById(chat.user2);
        if (user2 && user2.socketId) {
            const targetSocket = io.sockets.sockets.get(user2.socketId);
            if (targetSocket) {
                targetSocket.emit('chat_ended', { chatId });
            }
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–∫–∏ —á–∞—Ç–æ–≤ –¥–ª—è –æ–±–æ–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        const user1 = getUserById(chat.user1);
        if (user1 && user1.socketId) {
            const user1Socket = io.sockets.sockets.get(user1.socketId);
            if (user1Socket) {
                user1Socket.emit('chats_updated');
            }
        }
        
        if (user2 && user2.socketId) {
            const user2Socket = io.sockets.sockets.get(user2.socketId);
            if (user2Socket) {
                user2Socket.emit('chats_updated');
            }
        }
    });

    // –û–¢–ö–õ–Æ–ß–ï–ù–ò–ï
    socket.on('disconnect', (reason) => {
        console.log(`üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ: ${socket.id} (${reason})`);
        
        const user = getUserBySocketId(socket.id);
        if (user) {
            updateUser(user.id, {
                isOnline: false,
                socketId: null
            });
            
            socket.broadcast.emit('user_disconnected', { userId: user.id });
        }
    });
});

// API –º–∞—Ä—à—Ä—É—Ç—ã
app.get('/api/users', (req, res) => {
    const users = getUsers();
    res.json(users);
});

app.get('/api/chats', (req, res) => {
    const chats = getChats();
    res.json(chats);
});

app.get('/api/ratings', (req, res) => {
    const ratings = getRatings();
    res.json(ratings);
});

app.get('/api/notifications', (req, res) => {
    const notifications = getNotifications();
    res.json(notifications);
});

app.get('/api/moderation', (req, res) => {
    const history = getModerationHistory();
    res.json(history);
});

app.get('/api/stats', (req, res) => {
    const users = getUsers();
    const chats = getChats();
    
    const stats = {
        totalUsers: users.length,
        totalListeners: users.filter(u => u.role === 'listener').length,
        activeChats: chats.filter(c => c.isActive).length,
        onlineUsers: users.filter(u => u.isOnline).length
    };
    res.json(stats);
});

app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

app.get('/health', (req, res) => {
    res.json({ 
        status: 'OK', 
        timestamp: new Date().toISOString(),
        data: {
            users: getUsers().length,
            chats: getChats().length,
            ratings: getRatings().length
        }
    });
});

const PORT = process.env.PORT || 3000;
server.listen(PORT, '0.0.0.0', () => {
    const users = getUsers();
    console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log(`üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}`);
    console.log(`üí¨ –ß–∞—Ç–æ–≤: ${getChats().length}`);
    console.log(`‚≠ê –†–µ–π—Ç–∏–Ω–≥–æ–≤: ${getRatings().length}`);
    console.log(`üîê –ê–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è –≤—Ö–æ–¥–∞:`);
    console.log(`   üëë –í–ª–∞–¥–µ–ª–µ—Ü: owner / owner2024`);
    console.log(`   ‚öôÔ∏è –ê–¥–º–∏–Ω: admin / admin123`);
    console.log(`   üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: user / 123456`);
    console.log(`   üéß –°–ª—É—à–∞—Ç–µ–ª—å: listener / 123456`);
    console.log(`üåê URL: http://localhost:${PORT}`);
});
