// –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', function() {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    setTimeout(() => {
        hideAllInterfaces();
    }, 100);
    
    initializeApp();
});

function initializeApp() {
    setupAuthEventListeners();
    setupChatEventListeners();
    setupSettingsEventListeners();
    loadUserPreferences();
    connectToServer();
}

function loadUserPreferences() {
    const { theme, font, fontSize } = loadUserPreferences();
    changeTheme(theme, false);
    changeFont(font, false);
    changeFontSize(fontSize, false);
}

function connectToServer() {
    try {
        console.log('üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É:', SERVER_URL);
        
        socket = io(SERVER_URL, {
            transports: ['websocket', 'polling'],
            timeout: 10000,
            reconnection: true,
            reconnectionAttempts: 10,
            reconnectionDelay: 1000,
        });

        setupSocketEventListeners();

    } catch (error) {
        console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏:', error);
        showNotification('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É', 'error');
    }
}

function setupSocketEventListeners() {
    socket.on('connect', () => {
        console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Å–µ—Ä–≤–µ—Ä—É');
        showNotification('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Å–µ—Ä–≤–µ—Ä—É', 'success');
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Å—Å–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å
        const savedUserId = localStorage.getItem('currentUserId');
        if (savedUserId) {
            console.log('üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', savedUserId);
            socket.emit('restore_session', { userId: savedUserId });
        }
    });

    socket.on('disconnect', (reason) => {
        console.log('‚ùå –û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', reason);
        showNotification('‚ùå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º –ø–æ—Ç–µ—Ä—è–Ω–æ', 'error');
    });

    socket.on('connect_error', (error) => {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error);
        showNotification('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É', 'error');
    });

    socket.on('reconnect', (attemptNumber) => {
        console.log('üîÅ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, –ø–æ–ø—ã—Ç–∫–∞:', attemptNumber);
        showNotification('‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ', 'success');
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    socket.on('login_success', (data) => {
        console.log('‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥:', data.user);
        handleLoginSuccess(data.user);
    });

    socket.on('login_error', (error) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error);
        showNotification('‚ùå ' + error, 'error');
        const loginBtn = document.getElementById('loginBtn');
        if (loginBtn) {
            loginBtn.innerHTML = '<span>üö™ –í–æ–π—Ç–∏</span>';
            loginBtn.disabled = false;
        }
    });

    socket.on('registration_success', (data) => {
        console.log('‚úÖ –£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:', data.user);
        showNotification('‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!', 'success');
        handleLoginSuccess(data.user);
    });

    socket.on('registration_error', (error) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
        showNotification('‚ùå ' + error, 'error');
        const registerBtn = document.getElementById('registerBtn');
        if (registerBtn) {
            registerBtn.innerHTML = '<span>üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è</span>';
            registerBtn.disabled = false;
        }
    });

    socket.on('session_restored', (data) => {
        if (data.user) {
            console.log('üîÑ –°–µ—Å—Å–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞:', data.user);
            handleLoginSuccess(data.user);
        }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    socket.on('users_list', (data) => {
        console.log('üìä –ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', data.users?.length);
        users = data.users || [];
        updateUsersUI();
    });

    socket.on('chats_list', (data) => {
        console.log('üí¨ –ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤:', data.chats?.length);
        chats = data.chats || [];
        updateChatsUI();
    });

    socket.on('ratings_list', (data) => {
        console.log('‚≠ê –ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤:', data.ratings?.length);
        ratings = data.ratings || [];
        updateRatingsUI();
    });

    socket.on('notifications_list', (data) => {
        console.log('üì¢ –ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', data.notifications?.length);
        notifications = data.notifications || [];
        updateNotificationsUI();
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —á–∞—Ç–∞
    socket.on('new_message', (data) => {
        console.log('üì® –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', data);
        handleNewMessage(data);
    });

    socket.on('chat_created', (data) => {
        console.log('üí¨ –ß–∞—Ç —Å–æ–∑–¥–∞–Ω:', data.chat);
        const existingChat = chats.find(chat => chat.id === data.chat.id);
        if (!existingChat) {
            chats.push(data.chat);
        }
        activeChat = data.chat;
        updateChatsUI();
        showNotification(`üí¨ –ß–∞—Ç –Ω–∞—á–∞—Ç —Å ${data.listenerName}`, 'success');
        
        // –§–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        setTimeout(() => {
            const input = document.getElementById('userMessageInput');
            if (input) input.focus();
        }, 100);
    });

    socket.on('user_connected', (data) => {
        console.log('üîó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è:', data.user);
        const existingIndex = users.findIndex(u => u.id === data.user.id);
        if (existingIndex !== -1) {
            users[existingIndex] = { ...users[existingIndex], ...data.user, isOnline: true };
        } else {
            users.push({ ...data.user, isOnline: true });
        }
        updateUsersUI();
    });

    socket.on('user_disconnected', (data) => {
        console.log('üîå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª—é—á–∏–ª—Å—è:', data.userId);
        const user = users.find(u => u.id === data.userId);
        if (user) {
            user.isOnline = false;
        }
        updateUsersUI();
    });

    socket.on('user_updated', (data) => {
        console.log('üìù –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω:', data.user);
        const existingIndex = users.findIndex(u => u.id === data.user.id);
        if (existingIndex !== -1) {
            users[existingIndex] = data.user;
        }
        updateUsersUI();
    });

    socket.on('rating_submitted', (data) => {
        console.log('‚≠ê –†–µ–π—Ç–∏–Ω–≥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω:', data);
        showNotification('‚≠ê –†–µ–π—Ç–∏–Ω–≥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!', 'success');
        const listener = users.find(u => u.id === data.listenerId);
        if (listener) {
            listener.rating = data.newRating;
            listener.ratingCount = data.ratingCount;
        }
        updateUsersUI();
    });

    socket.on('rating_received', (data) => {
        console.log('‚≠ê –ü–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π –æ—Ç–∑—ã–≤:', data);
        updateListenerReviewsData();
    });

    socket.on('staff_added', (data) => {
        console.log('‚ûï –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω:', data);
        showNotification('‚úÖ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω', 'success');
        socket.emit('get_users');
    });

    socket.on('staff_add_error', (error) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:', error);
        showNotification('‚ùå ' + error, 'error');
    });

    socket.on('role_changed', (data) => {
        console.log('üé≠ –†–æ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞:', data);
        showNotification(`‚úÖ –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ ${getRoleDisplayName(data.newRole)}`, 'success');
        socket.emit('get_users');
    });

    socket.on('chat_ended', (data) => {
        console.log('üö™ –ß–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω:', data.chatId);
        const chat = chats.find(c => c.id === data.chatId);
        if (chat) {
            chat.isActive = false;
        }
        if (activeChat && activeChat.id === data.chatId) {
            endChat();
        }
        updateChatsUI();
    });

    socket.on('profile_updated', (data) => {
        console.log('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω:', data.user);
        currentUser = data.user;
        localStorage.setItem('currentUser', JSON.stringify(data.user));
        updateUserInterface();
        showNotification('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω', 'success');
    });

    socket.on('profile_update_error', (error) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error);
        showNotification('‚ùå ' + error, 'error');
    });

    socket.on('notification_sent', (data) => {
        console.log('üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', data);
        showNotification('‚úÖ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ', 'success');
        socket.emit('get_notifications');
    });

    socket.on('new_notification', (data) => {
        console.log('üì¢ –ù–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:', data);
        notifications.unshift(data.notification);
        updateNotificationsUI();
        showNotification(`üì¢ –ù–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: ${data.notification.title}`, 'info');
    });

    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    setTimeout(() => {
        if (socket && socket.connected) {
            socket.emit('get_users');
            socket.emit('get_chats');
            socket.emit('get_ratings');
            socket.emit('get_notifications');
        }
    }, 1000);
}

function updateUsersUI() {
    if (!currentUser) return;

    if (currentUser.role === 'user') {
        loadListenerCards();
    } else if (currentUser.role === 'listener') {
        updateListenerChatsList();
        updateListenerReviewsData();
        updateListenerStats();
    } else if (currentUser.role === 'admin') {
        updateAdminData();
    }
}

function updateChatsUI() {
    if (currentUser) {
        if (currentUser.role === 'user' && activeChat) {
            const updatedChat = chats.find(c => c.id === activeChat.id);
            if (updatedChat) {
                activeChat = updatedChat;
                loadUserChatMessages();
            }
        } else if (currentUser.role === 'listener') {
            updateListenerChatsList();
            if (activeChat) {
                const updatedChat = chats.find(c => c.id === activeChat.id);
                if (updatedChat) {
                    activeChat = updatedChat;
                    loadListenerChatMessages();
                }
            }
        } else if (currentUser.role === 'admin') {
            updateAdminChatsList();
        }
    }
}

function updateRatingsUI() {
    if (currentUser && currentUser.role === 'listener') {
        updateListenerReviewsData();
    }
}

console.log('üéâ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏ –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ!');
