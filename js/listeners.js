// –ú–æ–¥—É–ª—å —Å–ª—É—à–∞—Ç–µ–ª–µ–π
const listeners = {
    // –ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏ —Å–ª—É—à–∞—Ç–µ–ª–µ–π
    loadCards() {
        const container = document.getElementById('listenerCards');
        if (!container) return;
        
        const listeners = users.filter(u => 
            (u.role === 'listener' || u.role === 'admin') && 
            u.id !== currentUser.id && 
            u.isOnline
        );
        
        if (listeners.length === 0) {
            container.innerHTML = `
                <div style="text-align: center; grid-column: 1/-1; padding: 40px; color: #7f8c8d;">
                    <div>üòî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª—É—à–∞—Ç–µ–ª–µ–π –æ–Ω–ª–∞–π–Ω</div>
                    <div style="font-size: 14px; margin-top: 10px;">–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–ª—É—à–∞—Ç–µ–ª—è</div>
                </div>
            `;
            return;
        }

        container.innerHTML = listeners.map(listener => `
            <div class="listener-card" onclick="listeners.startChat('${listener.id}')">
                <div class="listener-avatar">${listener.avatar || 'üë§'}</div>
                <h3>${listener.displayName || listener.username}</h3>
                <div class="listener-rating">
                    <span class="star">‚òÖ</span>
                    <span>${(listener.rating || 0).toFixed(1)}</span>
                    <span>(${listener.ratingCount || 0})</span>
                </div>
                <div class="${listener.isOnline ? 'status-online' : 'status-offline'}" style="margin-top: 10px;">
                    ${listener.isOnline ? '‚óè –û–Ω–ª–∞–π–Ω' : '‚óã –û—Ñ–ª–∞–π–Ω'}
                </div>
                <div style="font-size: 12px; color: #7f8c8d; margin-top: 5px;">
                    ${utils.getRoleDisplayName(listener.role)}
                </div>
                ${listener.isOnline ? `
                    <div style="font-size: 12px; color: #27ae60; margin-top: 5px;">
                        ‚úÖ –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å
                    </div>
                ` : ''}
            </div>
        `).join('');
    },

    // –í—ã–±—Ä–∞—Ç—å —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–ª—É—à–∞—Ç–µ–ª—è
    selectRandom() {
        const listeners = users.filter(u => 
            (u.role === 'listener' || u.role === 'admin') && 
            u.isOnline && 
            u.id !== currentUser.id
        );
        if (listeners.length === 0) {
            utils.showNotification('‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª—É—à–∞—Ç–µ–ª–µ–π –æ–Ω–ª–∞–π–Ω!', 'error');
            return;
        }
        
        const randomListener = listeners[Math.floor(Math.random() * listeners.length)];
        this.startChat(randomListener.id);
    },

    // –ù–∞—á–∞—Ç—å —á–∞—Ç —Å–æ —Å–ª—É—à–∞—Ç–µ–ª–µ–º
    startChat(listenerId) {
        const listener = users.find(u => u.id === listenerId);
        if (!listener) {
            utils.showNotification('‚ùå –°–ª—É—à–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!', 'error');
            return;
        }

        currentListener = listener;
        
        console.log('üí¨ –ù–∞—á–∞–ª–æ —á–∞—Ç–∞ —Å:', listener.displayName || listener.username);
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —á–∞—Ç —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–µ—Ä
        socket.emit('create_chat', {
            user1: currentUser.id,
            user2: listenerId
        });

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á–∞—Ç
        utils.hideElement('listenersTab');
        utils.hideElement('userNotificationsTab');
        utils.showElement('userChatSection');
        
        const ratingElement = document.getElementById('currentListenerRating');
        if (ratingElement) {
            ratingElement.textContent = (listener.rating || 0).toFixed(1);
        }
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
        chatStartTime = new Date();
        chat.startChatTimer();
    },

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    init() {
        this.setupEventListeners();
    },

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
    setupEventListeners() {
        document.getElementById('randomListenerBtn')?.addEventListener('click', () => {
            this.selectRandom();
        });
    }
};
