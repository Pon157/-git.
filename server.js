const express = require('express');
const http = require('http');
const socketIo = require('socket.io');
const path = require('path');

const app = express();
const server = http.createServer(app);
const io = socketIo(server, {
  cors: {
    origin: "*",
    methods: ["GET", "POST"]
  }
});

// Middleware
app.use(express.static(path.join(__dirname, 'public')));
app.use(express.json());

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö
let messages = [];
let users = [
  {
    id: 1,
    username: 'owner',
    password: 'owner123',
    role: '–í–ª–∞–¥–µ–ª–µ—Ü',
    isOnline: false,
    registeredAt: new Date().toISOString(),
    rating: 5.0,
    ratingCount: 1,
    email: 'owner@system.com',
    displayName: '–í–ª–∞–¥–µ–ª–µ—Ü –°–∏—Å—Ç–µ–º—ã',
    avatar: '',
    permissions: ['all']
  },
  {
    id: 2,
    username: 'coowner',
    password: 'coowner123',
    role: '–°–æ–≤–ª–∞–¥–µ–ª–µ—Ü',
    isOnline: false,
    registeredAt: new Date().toISOString(),
    rating: 4.8,
    ratingCount: 1,
    email: 'coowner@system.com',
    displayName: '–°–æ–≤–ª–∞–¥–µ–ª–µ—Ü',
    avatar: '',
    permissions: ['all']
  },
  {
    id: 3,
    username: 'deputy',
    password: 'deputy123',
    role: '–ó–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å',
    isOnline: false,
    registeredAt: new Date().toISOString(),
    rating: 4.5,
    ratingCount: 1,
    email: 'deputy@system.com',
    displayName: '–ó–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å',
    avatar: '',
    permissions: ['manage_users', 'view_stats'] // –£–ë–†–ê–õ–ò send_broadcast
  },
  {
    id: 4,
    username: 'admin',
    password: 'admin123',
    role: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
    isOnline: false,
    registeredAt: new Date().toISOString(),
    rating: 4.2,
    ratingCount: 1,
    email: 'admin@system.com',
    displayName: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
    avatar: '',
    permissions: ['view_stats', 'manage_chats']
  },
  {
    id: 5,
    username: 'listener',
    password: 'listener123',
    role: '–°–ª—É—à–∞—Ç–µ–ª—å',
    isOnline: false,
    registeredAt: new Date().toISOString(),
    rating: 4.7,
    ratingCount: 3,
    email: 'listener@system.com',
    displayName: '–°–ª—É—à–∞—Ç–µ–ª—å',
    avatar: '',
    permissions: ['view_chats', 'view_own_rating'] // –î–û–ë–ê–í–ò–õ–ò –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–π—Ç–∏–Ω–≥–∞
  }
];

let chats = [];
let ratings = [];

// –°–∏—Å—Ç–µ–º–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
const rolePermissions = {
  '–í–ª–∞–¥–µ–ª–µ—Ü': ['all'],
  '–°–æ–≤–ª–∞–¥–µ–ª–µ—Ü': ['all'],
  '–ó–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å': ['manage_users', 'view_stats', 'manage_chats'], // –£–ë–†–ê–õ–ò send_broadcast
  '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä': ['view_stats', 'manage_chats', 'view_users'],
  '–°–ª—É—à–∞—Ç–µ–ª—å': ['view_chats', 'send_messages', 'view_own_rating'], // –î–û–ë–ê–í–ò–õ–ò –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–π—Ç–∏–Ω–≥–∞
  'user': ['send_messages', 'view_profile']
};

// –ú–∞—Ä—à—Ä—É—Ç—ã
app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

app.get('/api/users', (req, res) => {
  res.json(users);
});

app.get('/api/messages', (req, res) => {
  res.json(messages);
});

app.get('/api/chats', (req, res) => {
  res.json(chats);
});

// –ù–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/api/rating/:userId', (req, res) => {
  const userId = parseInt(req.params.userId);
  const user = users.find(u => u.id === userId);
  
  if (!user) {
    return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
  }
  
  const userRatings = ratings.filter(r => r.targetId === userId);
  const ratingDetails = userRatings.map(r => ({
    rating: r.rating,
    comment: r.comment,
    timestamp: r.timestamp,
    rater: users.find(u => u.id === r.raterId)?.displayName || '–ê–Ω–æ–Ω–∏–º'
  }));
  
  res.json({
    averageRating: user.rating,
    ratingCount: user.ratingCount,
    ratings: ratingDetails
  });
});

// WebSocket —Å–æ–±—ã—Ç–∏—è
io.on('connection', (socket) => {
  console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–∫–ª—é—á–µ–Ω:', socket.id);

  socket.emit('users_list', users);
  socket.emit('message_history', messages);
  socket.emit('chats_list', chats);

  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  socket.on('register_user', (userData) => {
    try {
      console.log('üìù –ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', userData.username);
      
      if (users.find(u => u.username === userData.username)) {
        return socket.emit('registration_error', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      }

      const newUser = {
        id: Date.now(),
        username: userData.username,
        password: userData.password,
        role: 'user',
        isOnline: true,
        registeredAt: new Date().toISOString(),
        rating: 0,
        ratingCount: 0,
        email: userData.email || '',
        displayName: userData.username,
        avatar: '',
        permissions: rolePermissions['user'],
        socketId: socket.id
      };

      users.push(newUser);
      console.log('‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', userData.username);
      
      socket.emit('registration_success', newUser);
      io.emit('users_list', users);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
      socket.emit('registration_error', '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
    }
  });

  // –í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  socket.on('login_user', (userData) => {
    try {
      console.log('üîê –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞:', userData.username);
      
      const user = users.find(u => 
        u.username === userData.username && 
        u.password === userData.password
      );

      if (user) {
        user.isOnline = true;
        user.socketId = socket.id;
        socket.userId = user.id;
        socket.userRole = user.role;
        
        console.log('‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥:', userData.username, '–†–æ–ª—å:', user.role);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –µ—Å–ª–∏ –æ–Ω —Å–ª—É—à–∞—Ç–µ–ª—å
        if (user.role === '–°–ª—É—à–∞—Ç–µ–ª—å') {
          const userRatings = ratings.filter(r => r.targetId === user.id);
          socket.emit('user_rating_data', {
            averageRating: user.rating,
            ratingCount: user.ratingCount,
            ratings: userRatings
          });
        }
        
        socket.emit('login_success', user);
        io.emit('users_list', users);
        io.emit('user_status_change', { 
          userId: user.id, 
          isOnline: true 
        });
        
      } else {
        console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:', userData.username);
        socket.emit('login_error', '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å');
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error);
      socket.emit('login_error', '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
    }
  });

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  socket.on('get_user_rating', (data) => {
    try {
      const requestingUser = users.find(u => u.id === socket.userId);
      const targetUser = users.find(u => u.id === data.userId);
      
      if (!requestingUser || !targetUser) return;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–µ–π—Ç–∏–Ω–≥—É
      if (requestingUser.id !== targetUser.id && 
          !requestingUser.permissions.includes('manage_users')) {
        return socket.emit('rating_error', '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞');
      }
      
      const userRatings = ratings.filter(r => r.targetId === data.userId);
      const ratingDetails = userRatings.map(r => ({
        rating: r.rating,
        comment: r.comment,
        timestamp: r.timestamp,
        rater: users.find(u => u.id === r.raterId)?.displayName || '–ê–Ω–æ–Ω–∏–º'
      }));
      
      socket.emit('user_rating_data', {
        averageRating: targetUser.rating,
        ratingCount: targetUser.ratingCount,
        ratings: ratingDetails
      });
      
    } catch (error) {
      socket.emit('rating_error', '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞');
    }
  });

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—Ä–∞–≤)
  socket.on('get_users', () => {
    const user = users.find(u => u.id === socket.userId);
    if (!user) return;
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
    let usersToSend = [];
    
    if (['–í–ª–∞–¥–µ–ª–µ—Ü', '–°–æ–≤–ª–∞–¥–µ–ª–µ—Ü', '–ó–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å'].includes(user.role)) {
      usersToSend = users; // –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø
    } else if (user.role === '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä') {
      usersToSend = users.filter(u => 
        ['user', '–°–ª—É—à–∞—Ç–µ–ª—å'].includes(u.role)
      );
    } else {
      usersToSend = users.filter(u => u.id === user.id); // –¢–æ–ª—å–∫–æ —Å–µ–±—è
    }
    
    socket.emit('users_list', usersToSend);
  });

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
  socket.on('send_message', (data) => {
    try {
      const user = users.find(u => u.id === socket.userId);
      if (!user) return;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
      if (!user.permissions.includes('send_messages') && user.role !== 'user') {
        return socket.emit('message_error', '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π');
      }

      const message = {
        id: Date.now(),
        username: user.username,
        displayName: user.displayName,
        text: data.text.trim(),
        timestamp: new Date().toISOString(),
        chatId: data.chatId || 'general',
        type: 'user',
        role: user.role
      };

      messages.push(message);
      io.emit('new_message', message);
      
      console.log('üí¨ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç', user.role, ':', user.username, data.text);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      socket.emit('message_error', '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è');
    }
  });

  // –û—Ü–µ–Ω–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  socket.on('rate_user', (data) => {
    try {
      const rater = users.find(u => u.id === socket.userId);
      const targetUser = users.find(u => u.id === data.userId);
      
      if (!rater || !targetUser) return;
      
      // –¢–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –æ—Ü–µ–Ω–∏–≤–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏ —Å–ª—É—à–∞—Ç–µ–ª–µ–π
      if (rater.role !== 'user' || !['–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä', '–°–ª—É—à–∞—Ç–µ–ª—å'].includes(targetUser.role)) {
        return socket.emit('rating_error', '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –æ—Ü–µ–Ω–∫–∏');
      }

      const rating = {
        id: Date.now(),
        raterId: rater.id,
        targetId: data.userId,
        rating: data.rating,
        timestamp: new Date().toISOString(),
        comment: data.comment || ''
      };

      ratings.push(rating);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userRatings = ratings.filter(r => r.targetId === data.userId);
      const averageRating = userRatings.reduce((sum, r) => sum + r.rating, 0) / userRatings.length;
      
      targetUser.rating = averageRating;
      targetUser.ratingCount = userRatings.length;

      io.emit('users_list', users);
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞
      if (targetUser.socketId) {
        io.to(targetUser.socketId).emit('user_rating_updated', {
          averageRating: targetUser.rating,
          ratingCount: targetUser.ratingCount
        });
      }
      
      socket.emit('rating_success', '–û—Ü–µ–Ω–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞');
      
    } catch (error) {
      socket.emit('rating_error', '–û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏');
    }
  });

  // –°–æ–∑–¥–∞–Ω–∏–µ —á–∞—Ç–∞
  socket.on('create_chat', (data) => {
    try {
      const user = users.find(u => u.id === socket.userId);
      if (!user || !user.permissions.includes('manage_chats')) {
        return socket.emit('chat_error', '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞');
      }

      const chat = {
        id: Date.now(),
        name: data.name,
        participants: data.participants || [],
        createdBy: user.id,
        createdAt: new Date().toISOString(),
        type: data.type || 'public'
      };
      
      chats.push(chat);
      io.emit('chats_list', chats);
      socket.emit('chat_created', chat);
      
    } catch (error) {
      socket.emit('chat_error', '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞');
    }
  });

  // –°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤)
  socket.on('send_system_message', (data) => {
    try {
      const user = users.find(u => u.id === socket.userId);
      if (!user || !['–í–ª–∞–¥–µ–ª–µ—Ü', '–°–æ–≤–ª–∞–¥–µ–ª–µ—Ü'].includes(user.role)) {
        return socket.emit('message_error', '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤');
      }

      const message = {
        id: Date.now(),
        username: 'system',
        displayName: '–°–∏—Å—Ç–µ–º–∞',
        text: data.text,
        timestamp: new Date().toISOString(),
        type: 'system'
      };

      messages.push(message);
      io.emit('new_message', message);
      
    } catch (error) {
      socket.emit('message_error', '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è');
    }
  });

  // –†–∞—Å—Å—ã–ª–∫–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤)
  socket.on('send_broadcast', (data) => {
    try {
      const user = users.find(u => u.id === socket.userId);
      if (!user || !['–í–ª–∞–¥–µ–ª–µ—Ü', '–°–æ–≤–ª–∞–¥–µ–ª–µ—Ü'].includes(user.role)) {
        return socket.emit('broadcast_error', '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏');
      }

      const broadcast = {
        id: Date.now(),
        text: data.text,
        sentBy: user.id,
        timestamp: new Date().toISOString(),
        target: data.target || 'all'
      };

      io.emit('new_broadcast', broadcast);
      socket.emit('broadcast_success', '–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞');
      
    } catch (error) {
      socket.emit('broadcast_error', '–û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏');
    }
  });

  // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ
  socket.on('disconnect', () => {
    console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª—é—á–µ–Ω:', socket.id);
    
    const user = users.find(u => u.socketId === socket.id);
    if (user) {
      user.isOnline = false;
      user.socketId = null;
      io.emit('users_list', users);
      io.emit('user_status_change', { 
        userId: user.id, 
        isOnline: false 
      });
      console.log('üî¥ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å offline:', user.username);
    }
  });
});

const PORT = process.env.PORT || 3000;
server.listen(PORT, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log('üë• –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:');
  console.log('   –í–ª–∞–¥–µ–ª–µ—Ü: owner / owner123');
  console.log('   –°–æ–≤–ª–∞–¥–µ–ª–µ—Ü: coowner / coowner123');
  console.log('   –ó–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å: deputy / deputy123');
  console.log('   –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: admin / admin123');
  console.log('   –°–ª—É—à–∞—Ç–µ–ª—å: listener / listener123');
});
