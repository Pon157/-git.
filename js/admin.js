// –ú–æ–¥—É–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
const admin = {
    // –ü–æ–∫–∞–∑–∞—Ç—å —Å–µ–∫—Ü–∏—é
    showSection(section) {
        document.querySelectorAll('.nav-item').forEach(item => {
            item.classList.toggle('active', item.getAttribute('data-section') === section);
        });

        document.querySelectorAll('.content-section').forEach(sec => {
            sec.classList.add('hidden');
        });

        document.getElementById(section + 'Section').classList.remove('hidden');
        
        const titles = {
            dashboard: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã',
            chats: 'üí¨ –í—Å–µ —á–∞—Ç—ã',
            users: 'üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏',
            staff: 'üéß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–æ–º',
            notifications: 'üì¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
            adminSettings: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è'
        };
        document.getElementById('contentTitle').textContent = titles[section];
        
        currentSection = section;
    },

    // –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∫–∏
    updateData() {
        const regularUsers = users.filter(u => u.role === 'user');
        const staff = users.filter(u => u.role !== 'user');
        const onlineUsers = users.filter(u => u.isOnline);
        
        document.getElementById('totalUsers').textContent = regularUsers.length;
        document.getElementById('totalListeners').textContent = staff.filter(u => u.role === 'listener').length;
        document.getElementById('activeChats').textContent = chats.filter(c => c.isActive).length;
        
        const listenersWithRatings = staff.filter(u => u.role === 'listener' && u.ratingCount > 0);
        const avgRating = listenersWithRatings.length > 0 ? 
            listenersWithRatings.reduce((sum, listener) => sum + (listener.rating || 0), 0) / listenersWithRatings.length : 0;
        document.getElementById('avgRating').textContent = avgRating.toFixed(1);
        
        this.updateOnlineUsersList(onlineUsers);
        this.updateQuickStats();
        this.updateUsersTable(regularUsers);
        this.updateStaffTable(staff);
        this.updateAdminChatsList();
        notifications.updateSentNotifications();
    },

    // –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    updateOnlineUsersList(onlineUsers) {
        const container = document.getElementById('onlineUsersList');
        if (onlineUsers.length === 0) {
            container.innerHTML = '<div style="text-align: center; color: #7f8c8d; padding: 20px;">–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–Ω–ª–∞–π–Ω</div>';
            return;
        }
        
        container.innerHTML = onlineUsers.map(user => `
            <div style="display: flex; align-items: center; gap: 10px; padding: 8px; border-bottom: 1px solid var(--border-color);">
                <div style="width: 8px; height: 8px; background: #27ae60; border-radius: 50%;"></div>
                <div>
                    <div style="font-weight: 600;">${user.displayName || user.username}</div>
                    <div style="font-size: 12px; color: #7f8c8d;">${utils.getRoleDisplayName(user.role)}</div>
                </div>
            </div>
        `).join('');
    },

    // –û–±–Ω–æ–≤–∏—Ç—å –±—ã—Å—Ç—Ä—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    updateQuickStats() {
        document.getElementById('messagesToday').textContent = chats.reduce((total, chat) => total + (chat.messages?.length || 0), 0);
        document.getElementById('newUsersToday').textContent = users.length;
        document.getElementById('avgChatDuration').textContent = '15–º';
    },

    // –û–±–Ω–æ–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    updateUsersTable(regularUsers) {
        const tbody = document.querySelector('#usersTable tbody');
        if (regularUsers.length === 0) {
            tbody.innerHTML = `
                <tr>
                    <td colspan="5" class="text-center" style="padding: 40px; color: #7f8c8d;">
                        üòî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
                    </td>
                </tr>
            `;
            return;
        }
        
        tbody.innerHTML = regularUsers.map(user => `
            <tr>
                <td>${user.username}</td>
                <td>${user.displayName || user.username}</td>
                <td>${utils.getRoleDisplayName(user.role)}</td>
                <td>
                    <span class="${user.isOnline ? 'status-online' : 'status-offline'}">
                        ${user.isOnline ? '‚óè –û–Ω–ª–∞–π–Ω' : '‚óã –û—Ñ–ª–∞–π–Ω'}
                    </span>
                </td>
                <td>
                    <button class="btn btn-small btn-primary" onclick="admin.promoteToListener('${user.id}')">
                        üéß –°–ª—É—à–∞—Ç–µ–ª—å
                    </button>
                </td>
            </tr>
        `).join('');
    },

    // –û–±–Ω–æ–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É –ø–µ—Ä—Å–æ–Ω–∞–ª–∞
    updateStaffTable(staff) {
        const tbody = document.querySelector('#staffTable tbody');
        if (staff.length === 0) {
            tbody.innerHTML = `
                <tr>
                    <td colspan="5" class="text-center" style="padding: 40px; color: #7f8c8d;">
                        üòî –ü–µ—Ä—Å–æ–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
                    </td>
                </tr>
            `;
            return;
        }
        
        tbody.innerHTML = staff.map(staffMember => `
            <tr>
                <td>${staffMember.username}</td>
                <td>${staffMember.displayName || staffMember.username}</td>
                <td>${utils.getRoleDisplayName(staffMember.role)}</td>
                <td>
                    <span class="${staffMember.isOnline ? 'status-online' : 'status-offline'}">
                        ${staffMember.isOnline ? '‚óè –û–Ω–ª–∞–π–Ω' : '‚óã –û—Ñ–ª–∞–π–Ω'}
                    </span>
                </td>
                <td>
                    ${staffMember.role !== 'admin' ? 
                        `<button class="btn btn-small btn-primary" onclick="admin.demoteToUser('${staffMember.id}')">
                            üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                        </button>` : 
                        '<span style="color: #7f8c8d; font-size: 12px;">üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä</span>'
                    }
                </td>
            </tr>
        `).join('');
    },

    // –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –∞–¥–º–∏–Ω–∞
    updateAdminChatsList() {
        const container = document.getElementById('adminChatsList');
        
        if (chats.length === 0) {
            container.innerHTML = `
                <div style="text-align: center; padding: 40px; color: #7f8c8d;">
                    <div>üòî –ß–∞—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç</div>
                    <div style="font-size: 14px; margin-top: 10px;">–í —Å–∏—Å—Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç —á–∞—Ç–æ–≤</div>
                </div>
            `;
            return;
        }
        
        container.innerHTML = chats.map(chat => {
            const user1 = users.find(u => u.id === chat.user1);
            const user2 = users.find(u => u.id === chat.user2);
            return `
                <div class="chat-item" data-chat-id="${chat.id}" onclick="admin.selectChat('${chat.id}')">
                    <div style="font-weight: 600;">
                        ${user1 ? (user1.displayName || user1.username) : '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'} 
                        ‚Üî 
                        ${user2 ? (user2.displayName || user2.username) : '–°–ª—É—à–∞—Ç–µ–ª—å'}
                    </div>
                    <div style="font-size: 12px; color: #7f8c8d;">
                        ${chat.isActive ? '‚óè –ê–∫—Ç–∏–≤–Ω—ã–π' : '‚óã –ó–∞–≤–µ—Ä—à–µ–Ω'} ‚Ä¢ 
                        ${chat.messages ? chat.messages.length : 0} —Å–æ–æ–±—â.
                    </div>
                    <div style="font-size: 11px; color: #7f8c8d; margin-top: 5px;">
                        ${utils.formatDate(chat.startTime)}
                    </div>
                </div>
            `;
        }).join('');
    },

    // –í—ã–±—Ä–∞—Ç—å —á–∞—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    selectChat(chatId) {
        const chat = chats.find(c => c.id === chatId);
        if (!chat) return;
        
        document.querySelectorAll('.chat-item').forEach(item => {
            item.classList.remove('active');
        });
        document.querySelector(`.chat-item[data-chat-id="${chatId}"]`).classList.add('active');
        
        this.loadChatMessages(chat);
    },

    // –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞
    loadChatMessages(chat) {
        const container = document.getElementById('adminMessagesContainer');
        
        container.innerHTML = '';
        
        if (!chat || !chat.messages || chat.messages.length === 0) {
            container.innerHTML = `
                <div style="text-align: center; color: #7f8c8d; margin-top: 50px;">
                    <div>üí¨ –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π</div>
                    <div style="font-size: 14px; margin-top: 10px;">–í —ç—Ç–æ–º —á–∞—Ç–µ –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π</div>
                </div>
            `;
            return;
        }
        
        chat.messages.forEach(message => {
            const messageDiv = document.createElement('div');
            const user = users.find(u => u.id === message.senderId);
            const isUser = user && user.role === 'user';
            
            messageDiv.className = `message ${isUser ? 'user' : 'other'}`;
            messageDiv.innerHTML = `
                <div><strong>${user ? (user.displayName || user.username) : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'}:</strong> ${message.text}</div>
                <div class="message-time">${utils.formatTime(message.timestamp)}</div>
            `;
            container.appendChild(messageDiv);
        });
        
        container.scrollTop = container.scrollHeight;
    },

    // –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    showAddStaffModal() {
        document.getElementById('addStaffModal').style.display = 'flex';
    },

    // –ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    closeAddStaffModal() {
        document.getElementById('addStaffModal').style.display = 'none';
        document.getElementById('newStaffUsername').value = '';
        document.getElementById('newStaffPassword').value = '';
        document.getElementById('newStaffName').value = '';
        document.getElementById('newStaffRole').value = 'listener';
    },

    // –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    addNewStaff() {
        const username = document.getElementById('newStaffUsername').value.trim();
        const password = document.getElementById('newStaffPassword').value.trim();
        const name = document.getElementById('newStaffName').value.trim();
        const role = document.getElementById('newStaffRole').value;

        if (!username || !password || !name) {
            utils.showNotification('‚ùå –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!', 'error');
            return;
        }

        if (socket && socket.connected) {
            socket.emit('register_staff', { 
                username, 
                password, 
                displayName: name, 
                role 
            });
        } else {
            utils.showNotification('‚ùå –ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º', 'error');
        }

        this.closeAddStaffModal();
    },

    // –ü–æ–≤—ã—Å–∏—Ç—å –¥–æ —Å–ª—É—à–∞—Ç–µ–ª—è
    promoteToListener(userId) {
        if (socket && socket.connected) {
            socket.emit('change_role', { userId, newRole: 'listener' });
        } else {
            utils.showNotification('‚ùå –ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º', 'error');
        }
    },

    // –ü–æ–Ω–∏–∑–∏—Ç—å –¥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    demoteToUser(userId) {
        if (socket && socket.connected) {
            socket.emit('change_role', { userId, newRole: 'user' });
        } else {
            utils.showNotification('‚ùå –ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º', 'error');
        }
    }
};
